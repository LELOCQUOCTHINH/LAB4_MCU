
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003814  08003814  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800381c  0800381c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000078  0800389c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800389c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001039c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  0003043d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00032f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00033b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f9  00000000  00000000  00034590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1fb  00000000  00000000  0004ce89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086155  00000000  00000000  0005c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e21d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe8  00000000  00000000  000e222c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080037d8 	.word	0x080037d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080037d8 	.word	0x080037d8

0800014c <__aeabi_ldivmod>:
 800014c:	b97b      	cbnz	r3, 800016e <__aeabi_ldivmod+0x22>
 800014e:	b972      	cbnz	r2, 800016e <__aeabi_ldivmod+0x22>
 8000150:	2900      	cmp	r1, #0
 8000152:	bfbe      	ittt	lt
 8000154:	2000      	movlt	r0, #0
 8000156:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800015a:	e006      	blt.n	800016a <__aeabi_ldivmod+0x1e>
 800015c:	bf08      	it	eq
 800015e:	2800      	cmpeq	r0, #0
 8000160:	bf1c      	itt	ne
 8000162:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000166:	f04f 30ff 	movne.w	r0, #4294967295
 800016a:	f000 b9a1 	b.w	80004b0 <__aeabi_idiv0>
 800016e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000172:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000176:	2900      	cmp	r1, #0
 8000178:	db09      	blt.n	800018e <__aeabi_ldivmod+0x42>
 800017a:	2b00      	cmp	r3, #0
 800017c:	db1a      	blt.n	80001b4 <__aeabi_ldivmod+0x68>
 800017e:	f000 f835 	bl	80001ec <__udivmoddi4>
 8000182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018a:	b004      	add	sp, #16
 800018c:	4770      	bx	lr
 800018e:	4240      	negs	r0, r0
 8000190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	db1b      	blt.n	80001d0 <__aeabi_ldivmod+0x84>
 8000198:	f000 f828 	bl	80001ec <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4240      	negs	r0, r0
 80001a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ac:	4252      	negs	r2, r2
 80001ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b2:	4770      	bx	lr
 80001b4:	4252      	negs	r2, r2
 80001b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ba:	f000 f817 	bl	80001ec <__udivmoddi4>
 80001be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c6:	b004      	add	sp, #16
 80001c8:	4240      	negs	r0, r0
 80001ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ce:	4770      	bx	lr
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	f000 f809 	bl	80001ec <__udivmoddi4>
 80001da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e2:	b004      	add	sp, #16
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9e08      	ldr	r6, [sp, #32]
 80001f2:	460d      	mov	r5, r1
 80001f4:	4604      	mov	r4, r0
 80001f6:	468e      	mov	lr, r1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	f040 8083 	bne.w	8000304 <__udivmoddi4+0x118>
 80001fe:	428a      	cmp	r2, r1
 8000200:	4617      	mov	r7, r2
 8000202:	d947      	bls.n	8000294 <__udivmoddi4+0xa8>
 8000204:	fab2 f382 	clz	r3, r2
 8000208:	b14b      	cbz	r3, 800021e <__udivmoddi4+0x32>
 800020a:	f1c3 0120 	rsb	r1, r3, #32
 800020e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000212:	fa20 f101 	lsr.w	r1, r0, r1
 8000216:	409f      	lsls	r7, r3
 8000218:	ea41 0e0e 	orr.w	lr, r1, lr
 800021c:	409c      	lsls	r4, r3
 800021e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000222:	fbbe fcf8 	udiv	ip, lr, r8
 8000226:	fa1f f987 	uxth.w	r9, r7
 800022a:	fb08 e21c 	mls	r2, r8, ip, lr
 800022e:	fb0c f009 	mul.w	r0, ip, r9
 8000232:	0c21      	lsrs	r1, r4, #16
 8000234:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000238:	4290      	cmp	r0, r2
 800023a:	d90a      	bls.n	8000252 <__udivmoddi4+0x66>
 800023c:	18ba      	adds	r2, r7, r2
 800023e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000242:	f080 8118 	bcs.w	8000476 <__udivmoddi4+0x28a>
 8000246:	4290      	cmp	r0, r2
 8000248:	f240 8115 	bls.w	8000476 <__udivmoddi4+0x28a>
 800024c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000250:	443a      	add	r2, r7
 8000252:	1a12      	subs	r2, r2, r0
 8000254:	fbb2 f0f8 	udiv	r0, r2, r8
 8000258:	fb08 2210 	mls	r2, r8, r0, r2
 800025c:	fb00 f109 	mul.w	r1, r0, r9
 8000260:	b2a4      	uxth	r4, r4
 8000262:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000266:	42a1      	cmp	r1, r4
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x92>
 800026a:	193c      	adds	r4, r7, r4
 800026c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000270:	f080 8103 	bcs.w	800047a <__udivmoddi4+0x28e>
 8000274:	42a1      	cmp	r1, r4
 8000276:	f240 8100 	bls.w	800047a <__udivmoddi4+0x28e>
 800027a:	3802      	subs	r0, #2
 800027c:	443c      	add	r4, r7
 800027e:	1a64      	subs	r4, r4, r1
 8000280:	2100      	movs	r1, #0
 8000282:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000286:	b11e      	cbz	r6, 8000290 <__udivmoddi4+0xa4>
 8000288:	2200      	movs	r2, #0
 800028a:	40dc      	lsrs	r4, r3
 800028c:	e9c6 4200 	strd	r4, r2, [r6]
 8000290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xac>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f382 	clz	r3, r2
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14f      	bne.n	8000340 <__udivmoddi4+0x154>
 80002a0:	1a8d      	subs	r5, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002a8:	fa1f f882 	uxth.w	r8, r2
 80002ac:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b0:	fb0e 551c 	mls	r5, lr, ip, r5
 80002b4:	fb08 f00c 	mul.w	r0, r8, ip
 80002b8:	0c22      	lsrs	r2, r4, #16
 80002ba:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0xe6>
 80002c2:	197d      	adds	r5, r7, r5
 80002c4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0xe4>
 80002ca:	42a8      	cmp	r0, r5
 80002cc:	f200 80e9 	bhi.w	80004a2 <__udivmoddi4+0x2b6>
 80002d0:	4694      	mov	ip, r2
 80002d2:	1a2d      	subs	r5, r5, r0
 80002d4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002d8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002dc:	fb08 f800 	mul.w	r8, r8, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e6:	45a0      	cmp	r8, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x10e>
 80002ea:	193c      	adds	r4, r7, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x10c>
 80002f2:	45a0      	cmp	r8, r4
 80002f4:	f200 80d9 	bhi.w	80004aa <__udivmoddi4+0x2be>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 0408 	sub.w	r4, r4, r8
 80002fe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000302:	e7c0      	b.n	8000286 <__udivmoddi4+0x9a>
 8000304:	428b      	cmp	r3, r1
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x12e>
 8000308:	2e00      	cmp	r6, #0
 800030a:	f000 80b1 	beq.w	8000470 <__udivmoddi4+0x284>
 800030e:	2100      	movs	r1, #0
 8000310:	e9c6 0500 	strd	r0, r5, [r6]
 8000314:	4608      	mov	r0, r1
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14b      	bne.n	80003ba <__udivmoddi4+0x1ce>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0x140>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80b9 	bhi.w	800049e <__udivmoddi4+0x2b2>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0303 	sbc.w	r3, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	469e      	mov	lr, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0aa      	beq.n	8000290 <__udivmoddi4+0xa4>
 800033a:	e9c6 4e00 	strd	r4, lr, [r6]
 800033e:	e7a7      	b.n	8000290 <__udivmoddi4+0xa4>
 8000340:	409f      	lsls	r7, r3
 8000342:	f1c3 0220 	rsb	r2, r3, #32
 8000346:	40d1      	lsrs	r1, r2
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fa1f f887 	uxth.w	r8, r7
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	fa24 f202 	lsr.w	r2, r4, r2
 800035c:	409d      	lsls	r5, r3
 800035e:	fb00 fc08 	mul.w	ip, r0, r8
 8000362:	432a      	orrs	r2, r5
 8000364:	0c15      	lsrs	r5, r2, #16
 8000366:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800036a:	45ac      	cmp	ip, r5
 800036c:	fa04 f403 	lsl.w	r4, r4, r3
 8000370:	d909      	bls.n	8000386 <__udivmoddi4+0x19a>
 8000372:	197d      	adds	r5, r7, r5
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	f080 808f 	bcs.w	800049a <__udivmoddi4+0x2ae>
 800037c:	45ac      	cmp	ip, r5
 800037e:	f240 808c 	bls.w	800049a <__udivmoddi4+0x2ae>
 8000382:	3802      	subs	r0, #2
 8000384:	443d      	add	r5, r7
 8000386:	eba5 050c 	sub.w	r5, r5, ip
 800038a:	fbb5 f1fe 	udiv	r1, r5, lr
 800038e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000392:	fb01 f908 	mul.w	r9, r1, r8
 8000396:	b295      	uxth	r5, r2
 8000398:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800039c:	45a9      	cmp	r9, r5
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x1c4>
 80003a0:	197d      	adds	r5, r7, r5
 80003a2:	f101 32ff 	add.w	r2, r1, #4294967295
 80003a6:	d274      	bcs.n	8000492 <__udivmoddi4+0x2a6>
 80003a8:	45a9      	cmp	r9, r5
 80003aa:	d972      	bls.n	8000492 <__udivmoddi4+0x2a6>
 80003ac:	3902      	subs	r1, #2
 80003ae:	443d      	add	r5, r7
 80003b0:	eba5 0509 	sub.w	r5, r5, r9
 80003b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003b8:	e778      	b.n	80002ac <__udivmoddi4+0xc0>
 80003ba:	f1c1 0720 	rsb	r7, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c8:	fa25 f407 	lsr.w	r4, r5, r7
 80003cc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003d4:	fa1f f88c 	uxth.w	r8, ip
 80003d8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003dc:	fa20 f307 	lsr.w	r3, r0, r7
 80003e0:	fb09 fa08 	mul.w	sl, r9, r8
 80003e4:	408d      	lsls	r5, r1
 80003e6:	431d      	orrs	r5, r3
 80003e8:	0c2b      	lsrs	r3, r5, #16
 80003ea:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	fa02 f201 	lsl.w	r2, r2, r1
 80003f4:	fa00 f301 	lsl.w	r3, r0, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x222>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f109 30ff 	add.w	r0, r9, #4294967295
 8000402:	d248      	bcs.n	8000496 <__udivmoddi4+0x2aa>
 8000404:	45a2      	cmp	sl, r4
 8000406:	d946      	bls.n	8000496 <__udivmoddi4+0x2aa>
 8000408:	f1a9 0902 	sub.w	r9, r9, #2
 800040c:	4464      	add	r4, ip
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	fbb4 f0fe 	udiv	r0, r4, lr
 8000416:	fb0e 4410 	mls	r4, lr, r0, r4
 800041a:	fb00 fa08 	mul.w	sl, r0, r8
 800041e:	b2ad      	uxth	r5, r5
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x24e>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000430:	d22d      	bcs.n	800048e <__udivmoddi4+0x2a2>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d92b      	bls.n	800048e <__udivmoddi4+0x2a2>
 8000436:	3802      	subs	r0, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c6      	mov	lr, r8
 800044a:	464d      	mov	r5, r9
 800044c:	d319      	bcc.n	8000482 <__udivmoddi4+0x296>
 800044e:	d016      	beq.n	800047e <__udivmoddi4+0x292>
 8000450:	b15e      	cbz	r6, 800046a <__udivmoddi4+0x27e>
 8000452:	ebb3 020e 	subs.w	r2, r3, lr
 8000456:	eb64 0405 	sbc.w	r4, r4, r5
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	fa22 f301 	lsr.w	r3, r2, r1
 8000462:	431f      	orrs	r7, r3
 8000464:	40cc      	lsrs	r4, r1
 8000466:	e9c6 7400 	strd	r7, r4, [r6]
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	4631      	mov	r1, r6
 8000472:	4630      	mov	r0, r6
 8000474:	e70c      	b.n	8000290 <__udivmoddi4+0xa4>
 8000476:	468c      	mov	ip, r1
 8000478:	e6eb      	b.n	8000252 <__udivmoddi4+0x66>
 800047a:	4610      	mov	r0, r2
 800047c:	e6ff      	b.n	800027e <__udivmoddi4+0x92>
 800047e:	4543      	cmp	r3, r8
 8000480:	d2e6      	bcs.n	8000450 <__udivmoddi4+0x264>
 8000482:	ebb8 0e02 	subs.w	lr, r8, r2
 8000486:	eb69 050c 	sbc.w	r5, r9, ip
 800048a:	3801      	subs	r0, #1
 800048c:	e7e0      	b.n	8000450 <__udivmoddi4+0x264>
 800048e:	4628      	mov	r0, r5
 8000490:	e7d3      	b.n	800043a <__udivmoddi4+0x24e>
 8000492:	4611      	mov	r1, r2
 8000494:	e78c      	b.n	80003b0 <__udivmoddi4+0x1c4>
 8000496:	4681      	mov	r9, r0
 8000498:	e7b9      	b.n	800040e <__udivmoddi4+0x222>
 800049a:	4608      	mov	r0, r1
 800049c:	e773      	b.n	8000386 <__udivmoddi4+0x19a>
 800049e:	4608      	mov	r0, r1
 80004a0:	e749      	b.n	8000336 <__udivmoddi4+0x14a>
 80004a2:	f1ac 0c02 	sub.w	ip, ip, #2
 80004a6:	443d      	add	r5, r7
 80004a8:	e713      	b.n	80002d2 <__udivmoddi4+0xe6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	e724      	b.n	80002fa <__udivmoddi4+0x10e>

080004b0 <__aeabi_idiv0>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <constructorsTaskWithParameters>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct sTask * constructorsTaskWithParameters(void (*pTask)(void), int64_t Delay,
											uint32_t Period/*, uint8_t RunMe*/, uint32_t TaskID,
											struct sTask * next, struct sTask * previous)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	e9c7 2300 	strd	r2, r3, [r7]
	struct sTask * temp = NULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]

//	while(temp == NULL) //ask to allocate memory until that is granted memory
//	{
		temp = (struct sTask *)malloc(sizeof(struct sTask));
 80004c4:	2020      	movs	r0, #32
 80004c6:	f003 f8ab 	bl	8003620 <malloc>
 80004ca:	4603      	mov	r3, r0
 80004cc:	617b      	str	r3, [r7, #20]
//	}

	if(temp == NULL)
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d101      	bne.n	80004d8 <constructorsTaskWithParameters+0x24>
		return temp;
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	e014      	b.n	8000502 <constructorsTaskWithParameters+0x4e>

	temp -> pTask = pTask;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	601a      	str	r2, [r3, #0]
	temp -> Delay = Delay;
 80004de:	6979      	ldr	r1, [r7, #20]
 80004e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temp -> Period = Period;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	6a3a      	ldr	r2, [r7, #32]
 80004ec:	611a      	str	r2, [r3, #16]
//	temp -> RunMe = RunMe;
	temp -> TaskID = TaskID;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004f2:	615a      	str	r2, [r3, #20]
	temp -> next = next;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004f8:	619a      	str	r2, [r3, #24]
	temp -> previous = previous;
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004fe:	61da      	str	r2, [r3, #28]

	return temp;
 8000500:	697b      	ldr	r3, [r7, #20]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <constructorSDSNoParameters>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct SDS * constructorSDSNoParameters()
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
	struct SDS * temp = NULL;
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
//	while(temp == NULL) //ask to allocate memory until that is granted memory
//	{
		temp = (struct SDS *)malloc(sizeof(struct SDS));
 8000514:	200c      	movs	r0, #12
 8000516:	f003 f883 	bl	8003620 <malloc>
 800051a:	4603      	mov	r3, r0
 800051c:	607b      	str	r3, [r7, #4]
//	}

	if(temp == NULL)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <constructorSDSNoParameters+0x1e>
		return temp;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	e009      	b.n	800053c <constructorSDSNoParameters+0x32>

	temp -> head = NULL;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	temp -> tail = NULL;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
	temp -> count = 0;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	721a      	strb	r2, [r3, #8]

	return temp;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <destructorSDS>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void destructorSDS(struct SDS * needToBeDeleted)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if(needToBeDeleted == NULL)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d029      	beq.n	80005a6 <destructorSDS+0x62>
		return;

	struct sTask * temp_head = needToBeDeleted -> head;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	617b      	str	r3, [r7, #20]
	struct sTask * temp_tail = needToBeDeleted -> tail;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	613b      	str	r3, [r7, #16]

	do
	{
		if(temp_head != NULL)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d007      	beq.n	8000574 <destructorSDS+0x30>
		{
			struct sTask * temp = temp_head -> next;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	60fb      	str	r3, [r7, #12]
			free(temp_head);
 800056a:	6978      	ldr	r0, [r7, #20]
 800056c:	f003 f860 	bl	8003630 <free>
			temp_head = temp;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	617b      	str	r3, [r7, #20]
		}

		if(temp_tail != NULL)
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d007      	beq.n	800058a <destructorSDS+0x46>
		{
			struct sTask * temp = temp_tail -> previous;
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	60bb      	str	r3, [r7, #8]
			free(temp_tail);
 8000580:	6938      	ldr	r0, [r7, #16]
 8000582:	f003 f855 	bl	8003630 <free>
			temp_tail = temp;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	613b      	str	r3, [r7, #16]
		}

	}
		while(temp_head != temp_tail);
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	429a      	cmp	r2, r3
 8000590:	d1e5      	bne.n	800055e <destructorSDS+0x1a>

	if(temp_head != NULL)
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <destructorSDS+0x5a>
		free(temp_head);
 8000598:	6978      	ldr	r0, [r7, #20]
 800059a:	f003 f849 	bl	8003630 <free>

	needToBeDeleted -> count = 0;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	721a      	strb	r2, [r3, #8]
 80005a4:	e000      	b.n	80005a8 <destructorSDS+0x64>
		return;
 80005a6:	bf00      	nop
//	needToBeDeleted -> head = NULL; //don't need because at the end head = tail = null
//	needToBeDeleted -> tail = NULL;
}
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <ConstructorBufferSchedulerNoParameters>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct BufferScheduler * ConstructorBufferSchedulerNoParameters(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
	struct BufferScheduler * temp = (struct BufferScheduler *) malloc(sizeof(struct BufferScheduler));
 80005b4:	2010      	movs	r0, #16
 80005b6:	f003 f833 	bl	8003620 <malloc>
 80005ba:	4603      	mov	r3, r0
 80005bc:	607b      	str	r3, [r7, #4]

	if(temp == NULL)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <ConstructorBufferSchedulerNoParameters+0x1a>
		return NULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e00e      	b.n	80005e6 <ConstructorBufferSchedulerNoParameters+0x38>

	temp -> pastCount = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	731a      	strb	r2, [r3, #12]
	temp -> Delay = INT64_MAX;
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 32ff 	mov.w	r2, #4294967295
 80005d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80005d8:	e9c1 2300 	strd	r2, r3, [r1]
	temp -> Period = (uint32_t) -1; //because unsigned integer so -1 will be max of it
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f04f 32ff 	mov.w	r2, #4294967295
 80005e2:	609a      	str	r2, [r3, #8]

	return temp;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <SCH_Init>:


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SCH_Init ( void )
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	if(BufferTimer == NULL)
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <SCH_Init+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d105      	bne.n	8000608 <SCH_Init+0x18>
		BufferTimer = ConstructorBufferSchedulerNoParameters();
 80005fc:	f7ff ffd7 	bl	80005ae <ConstructorBufferSchedulerNoParameters>
 8000600:	4603      	mov	r3, r0
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <SCH_Init+0x5c>)
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	e010      	b.n	800062a <SCH_Init+0x3a>

	else
	{
		BufferTimer -> pastCount = 0;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <SCH_Init+0x5c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	731a      	strb	r2, [r3, #12]
		BufferTimer -> Delay = INT64_MAX;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <SCH_Init+0x5c>)
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800061c:	e9c1 2300 	strd	r2, r3, [r1]
		BufferTimer -> Period = (uint32_t) -1;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <SCH_Init+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 32ff 	mov.w	r2, #4294967295
 8000628:	609a      	str	r2, [r3, #8]
	}

	if(schedulerDataStructure == NULL)
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <SCH_Init+0x60>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d105      	bne.n	800063e <SCH_Init+0x4e>
	{
		schedulerDataStructure = constructorSDSNoParameters();
 8000632:	f7ff ff6a 	bl	800050a <constructorSDSNoParameters>
 8000636:	4603      	mov	r3, r0
 8000638:	4a05      	ldr	r2, [pc, #20]	; (8000650 <SCH_Init+0x60>)
 800063a:	6013      	str	r3, [r2, #0]
		return;
 800063c:	e004      	b.n	8000648 <SCH_Init+0x58>
	}

	destructorSDS(schedulerDataStructure);
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <SCH_Init+0x60>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff7e 	bl	8000544 <destructorSDS>
//	taskImplement = NULL;
}
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	20000094 	.word	0x20000094

08000654 <SCH_Update>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SCH_Update(void)
{
 8000654:	b490      	push	{r4, r7}
 8000656:	af00      	add	r7, sp, #0
	if(BufferTimer == NULL)
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <SCH_Update+0x2c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00a      	beq.n	8000676 <SCH_Update+0x22>
		return;

	(BufferTimer -> Delay) --;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <SCH_Update+0x2c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000668:	f112 30ff 	adds.w	r0, r2, #4294967295
 800066c:	f143 31ff 	adc.w	r1, r3, #4294967295
 8000670:	e9c4 0100 	strd	r0, r1, [r4]
 8000674:	e000      	b.n	8000678 <SCH_Update+0x24>
		return;
 8000676:	bf00      	nop
}
 8000678:	46bd      	mov	sp, r7
 800067a:	bc90      	pop	{r4, r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000098 	.word	0x20000098

08000684 <dealWithTasksAdded>:
//update software timer

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void dealWithTasksAdded(int32_t differenceCount)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	struct sTask * temp_tail = schedulerDataStructure -> tail;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <dealWithTasksAdded+0x70>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]

	if(temp_tail == NULL)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d026      	beq.n	80006e8 <dealWithTasksAdded+0x64>
		return;

	for(AmountTasks i = 0 ; i < differenceCount ; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	72fb      	strb	r3, [r7, #11]
 800069e:	e01e      	b.n	80006de <dealWithTasksAdded+0x5a>
	{
		if(BufferTimer -> Delay > temp_tail -> Delay)
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <dealWithTasksAdded+0x74>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006a8:	68f9      	ldr	r1, [r7, #12]
 80006aa:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80006ae:	4290      	cmp	r0, r2
 80006b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80006b4:	da0d      	bge.n	80006d2 <dealWithTasksAdded+0x4e>
			//if current delay in buffer greater than delay of a task in SDS so we need carry it to buffer
		{
			BufferTimer -> Delay = temp_tail -> Delay;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <dealWithTasksAdded+0x74>)
 80006b8:	6819      	ldr	r1, [r3, #0]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006c0:	e9c1 2300 	strd	r2, r3, [r1]
			BufferTimer -> Period = temp_tail -> Delay;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006ca:	490b      	ldr	r1, [pc, #44]	; (80006f8 <dealWithTasksAdded+0x74>)
 80006cc:	6809      	ldr	r1, [r1, #0]
 80006ce:	4613      	mov	r3, r2
 80006d0:	608b      	str	r3, [r1, #8]
			//just use delay because we will minus by origin delay after BufferTimer -> Delay = 0 that indicate have delayed time elapse
		}
		temp_tail = temp_tail -> previous;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	60fb      	str	r3, [r7, #12]
	for(AmountTasks i = 0 ; i < differenceCount ; i++)
 80006d8:	7afb      	ldrb	r3, [r7, #11]
 80006da:	3301      	adds	r3, #1
 80006dc:	72fb      	strb	r3, [r7, #11]
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dcdc      	bgt.n	80006a0 <dealWithTasksAdded+0x1c>
 80006e6:	e000      	b.n	80006ea <dealWithTasksAdded+0x66>
		return;
 80006e8:	bf00      	nop
	}
}
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000094 	.word	0x20000094
 80006f8:	20000098 	.word	0x20000098

080006fc <ProcessBufferChanged>:

void ProcessBufferChanged(int64_t saveDelay, uint32_t savePeriod)
{
 80006fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000700:	b087      	sub	sp, #28
 8000702:	af00      	add	r7, sp, #0
 8000704:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
	struct sTask * temp = schedulerDataStructure -> head;
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <ProcessBufferChanged+0x7c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	617b      	str	r3, [r7, #20]

	if(temp == NULL)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d029      	beq.n	800076c <ProcessBufferChanged+0x70>
		return;

	for(AmountTasks i = 0 ; i < BufferTimer -> pastCount ; i++) //don't use count in the SDS because we just need to update older tasks
 8000718:	2300      	movs	r3, #0
 800071a:	74fb      	strb	r3, [r7, #19]
 800071c:	e019      	b.n	8000752 <ProcessBufferChanged+0x56>
	{
		temp -> Delay -= ((int64_t)savePeriod) - saveDelay;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	4688      	mov	r8, r1
 8000728:	f04f 0900 	mov.w	r9, #0
 800072c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000730:	ebb8 0400 	subs.w	r4, r8, r0
 8000734:	eb69 0501 	sbc.w	r5, r9, r1
 8000738:	ebb2 0a04 	subs.w	sl, r2, r4
 800073c:	eb63 0b05 	sbc.w	fp, r3, r5
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	e9c3 ab02 	strd	sl, fp, [r3, #8]
		temp = temp -> next;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	617b      	str	r3, [r7, #20]
	for(AmountTasks i = 0 ; i < BufferTimer -> pastCount ; i++) //don't use count in the SDS because we just need to update older tasks
 800074c:	7cfb      	ldrb	r3, [r7, #19]
 800074e:	3301      	adds	r3, #1
 8000750:	74fb      	strb	r3, [r7, #19]
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <ProcessBufferChanged+0x80>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	7b1b      	ldrb	r3, [r3, #12]
 8000758:	7cfa      	ldrb	r2, [r7, #19]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3df      	bcc.n	800071e <ProcessBufferChanged+0x22>
	}

	BufferTimer -> pastCount = schedulerDataStructure -> count;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <ProcessBufferChanged+0x7c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <ProcessBufferChanged+0x80>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	7a12      	ldrb	r2, [r2, #8]
 8000768:	731a      	strb	r2, [r3, #12]
 800076a:	e000      	b.n	800076e <ProcessBufferChanged+0x72>
		return;
 800076c:	bf00      	nop
}
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000776:	4770      	bx	lr
 8000778:	20000094 	.word	0x20000094
 800077c:	20000098 	.word	0x20000098

08000780 <deleteOnTheSpot>:

void deleteOnTheSpot(struct sTask * needToBeDeleted)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(needToBeDeleted -> previous != NULL)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d004      	beq.n	800079a <deleteOnTheSpot+0x1a>
		needToBeDeleted -> previous -> next = needToBeDeleted -> next;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	6992      	ldr	r2, [r2, #24]
 8000798:	619a      	str	r2, [r3, #24]

	if(needToBeDeleted -> next != NULL)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <deleteOnTheSpot+0x2c>
		needToBeDeleted -> next -> previous = needToBeDeleted -> previous;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	69d2      	ldr	r2, [r2, #28]
 80007aa:	61da      	str	r2, [r3, #28]

	schedulerDataStructure -> count --;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <deleteOnTheSpot+0x48>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	7a1a      	ldrb	r2, [r3, #8]
 80007b2:	3a01      	subs	r2, #1
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	721a      	strb	r2, [r3, #8]

	free(needToBeDeleted);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f002 ff39 	bl	8003630 <free>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000094 	.word	0x20000094

080007cc <Run_Tasks>:

void Run_Tasks()
{
 80007cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
	if(schedulerDataStructure == NULL || schedulerDataStructure -> count <= 0)
 80007d4:	4b75      	ldr	r3, [pc, #468]	; (80009ac <Run_Tasks+0x1e0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 80e1 	beq.w	80009a0 <Run_Tasks+0x1d4>
 80007de:	4b73      	ldr	r3, [pc, #460]	; (80009ac <Run_Tasks+0x1e0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 80db 	beq.w	80009a0 <Run_Tasks+0x1d4>
		return;

	if(schedulerDataStructure -> count == 1)
 80007ea:	4b70      	ldr	r3, [pc, #448]	; (80009ac <Run_Tasks+0x1e0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d111      	bne.n	8000818 <Run_Tasks+0x4c>
	{
		schedulerDataStructure -> head -> pTask();
 80007f4:	4b6d      	ldr	r3, [pc, #436]	; (80009ac <Run_Tasks+0x1e0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4798      	blx	r3
		schedulerDataStructure -> head -> Delay = schedulerDataStructure -> head -> Period;
 80007fe:	4b6b      	ldr	r3, [pc, #428]	; (80009ac <Run_Tasks+0x1e0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	4a69      	ldr	r2, [pc, #420]	; (80009ac <Run_Tasks+0x1e0>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	6811      	ldr	r1, [r2, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 8000816:	e0c4      	b.n	80009a2 <Run_Tasks+0x1d6>
	}

	struct sTask * temp_head = schedulerDataStructure -> head;
 8000818:	4b64      	ldr	r3, [pc, #400]	; (80009ac <Run_Tasks+0x1e0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	60fb      	str	r3, [r7, #12]
	struct sTask * temp_tail = schedulerDataStructure -> tail;
 8000820:	4b62      	ldr	r3, [pc, #392]	; (80009ac <Run_Tasks+0x1e0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	60bb      	str	r3, [r7, #8]

//	while(temp_head != temp_tail /*for case with odd number count*/
//			&& temp_head -> previous != temp_tail && temp_tail -> next != temp_head
//			/*for case with even number of count*/)
	AmountTasks limit = (schedulerDataStructure -> count) / 2;
 8000828:	4b60      	ldr	r3, [pc, #384]	; (80009ac <Run_Tasks+0x1e0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7a1b      	ldrb	r3, [r3, #8]
 800082e:	085b      	lsrs	r3, r3, #1
 8000830:	71bb      	strb	r3, [r7, #6]
	AmountTasks isOdd = (schedulerDataStructure -> count) % 2;
 8000832:	4b5e      	ldr	r3, [pc, #376]	; (80009ac <Run_Tasks+0x1e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	7a1b      	ldrb	r3, [r3, #8]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	717b      	strb	r3, [r7, #5]
	for(AmountTasks i = 0 ; i < limit ; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e06c      	b.n	800091e <Run_Tasks+0x152>
	{
		if(temp_head != NULL)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d031      	beq.n	80008ae <Run_Tasks+0xe2>
		{
			temp_head -> Delay -= (int64_t) BufferTimer -> Period; //BufferTimer -> Delay is equaling zero so we don't need minus it
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000850:	4b57      	ldr	r3, [pc, #348]	; (80009b0 <Run_Tasks+0x1e4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	461a      	mov	r2, r3
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	ebb0 0802 	subs.w	r8, r0, r2
 8000860:	eb61 0903 	sbc.w	r9, r1, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	e9c3 8902 	strd	r8, r9, [r3, #8]

			if(temp_head -> Delay <= 0)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000870:	2a01      	cmp	r2, #1
 8000872:	f173 0300 	sbcs.w	r3, r3, #0
 8000876:	da0a      	bge.n	800088e <Run_Tasks+0xc2>
			{
				temp_head -> pTask();
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4798      	blx	r3
				temp_head -> Delay = temp_head -> Period;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	461a      	mov	r2, r3
 8000884:	f04f 0300 	mov.w	r3, #0
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}

			if(temp_head -> Period <= 0)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d108      	bne.n	80008a8 <Run_Tasks+0xdc>
			{
				temp_head = temp_head -> next;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	60fb      	str	r3, [r7, #12]
				deleteOnTheSpot(temp_head -> previous); //delete at index undo
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff6d 	bl	8000780 <deleteOnTheSpot>
 80008a6:	e002      	b.n	80008ae <Run_Tasks+0xe2>
			}

			else
				temp_head = temp_head -> next;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	60fb      	str	r3, [r7, #12]
		}

		if(temp_tail != NULL)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d031      	beq.n	8000918 <Run_Tasks+0x14c>
		{
			temp_tail -> Delay -= (int64_t) BufferTimer -> Period; //BufferTimer -> Delay is equaling zero so we don't need minus it
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80008ba:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <Run_Tasks+0x1e4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	461a      	mov	r2, r3
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	ebb0 0a02 	subs.w	sl, r0, r2
 80008ca:	eb61 0b03 	sbc.w	fp, r1, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	e9c3 ab02 	strd	sl, fp, [r3, #8]

			if(temp_tail -> Delay <= 0)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008da:	2a01      	cmp	r2, #1
 80008dc:	f173 0300 	sbcs.w	r3, r3, #0
 80008e0:	da0a      	bge.n	80008f8 <Run_Tasks+0x12c>
			{
				temp_tail -> pTask();
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4798      	blx	r3
				temp_tail -> Delay = temp_tail -> Period;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	461a      	mov	r2, r3
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}

			if(temp_tail -> Period <= 0)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d108      	bne.n	8000912 <Run_Tasks+0x146>
			{
				temp_tail = temp_tail -> previous;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	60bb      	str	r3, [r7, #8]
				deleteOnTheSpot(temp_tail -> next);//delete at index undo
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff38 	bl	8000780 <deleteOnTheSpot>
 8000910:	e002      	b.n	8000918 <Run_Tasks+0x14c>
			}

			else
				temp_tail = temp_tail -> previous;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	60bb      	str	r3, [r7, #8]
	for(AmountTasks i = 0 ; i < limit ; i++)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	3301      	adds	r3, #1
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	429a      	cmp	r2, r3
 8000924:	d38e      	bcc.n	8000844 <Run_Tasks+0x78>
		}
	}

	if(isOdd && temp_head != NULL)
 8000926:	797b      	ldrb	r3, [r7, #5]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d02f      	beq.n	800098c <Run_Tasks+0x1c0>
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d02c      	beq.n	800098c <Run_Tasks+0x1c0>
		//execute remain task due to if count is odd, the iterator above will stop when still remain a task don't be executed
		//it has presented at middle index already due to iterator above so don't need get temp_head -> next
	{
		temp_head -> Delay -= (int64_t) BufferTimer -> Period;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <Run_Tasks+0x1e4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	461a      	mov	r2, r3
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	1a84      	subs	r4, r0, r2
 8000946:	eb61 0503 	sbc.w	r5, r1, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	e9c3 4502 	strd	r4, r5, [r3, #8]

		if(temp_head -> Delay <= 0)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000956:	2a01      	cmp	r2, #1
 8000958:	f173 0300 	sbcs.w	r3, r3, #0
 800095c:	da0a      	bge.n	8000974 <Run_Tasks+0x1a8>
		{
			temp_head -> pTask();
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4798      	blx	r3
			temp_head -> Delay = temp_head -> Period;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	461a      	mov	r2, r3
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	68f9      	ldr	r1, [r7, #12]
 8000970:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if(temp_head -> Period <= 0)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <Run_Tasks+0x1c0>
		{
			temp_head = temp_head -> next;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	60fb      	str	r3, [r7, #12]
			deleteOnTheSpot(temp_head -> previous);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fefa 	bl	8000780 <deleteOnTheSpot>
		}
		//Or
//		temp_tail -> previous -> pTask();
	}

	BufferTimer -> Period = schedulerDataStructure -> head -> Delay;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <Run_Tasks+0x1e0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000996:	4906      	ldr	r1, [pc, #24]	; (80009b0 <Run_Tasks+0x1e4>)
 8000998:	6809      	ldr	r1, [r1, #0]
 800099a:	4613      	mov	r3, r2
 800099c:	608b      	str	r3, [r1, #8]
//	BufferTimer -> Delay = BufferTimer -> Period;
	//assign for first element in the SDS to compare remain elements to find largest delay

	return;
 800099e:	e000      	b.n	80009a2 <Run_Tasks+0x1d6>
		return;
 80009a0:	bf00      	nop
}
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80009aa:	bf00      	nop
 80009ac:	20000094 	.word	0x20000094
 80009b0:	20000098 	.word	0x20000098

080009b4 <refreshBuffer>:

void refreshBuffer()
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
		if(schedulerDataStructure == NULL || schedulerDataStructure -> count <= 0)
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <refreshBuffer+0x140>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 8093 	beq.w	8000aea <refreshBuffer+0x136>
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <refreshBuffer+0x140>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	7a1b      	ldrb	r3, [r3, #8]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 808d 	beq.w	8000aea <refreshBuffer+0x136>
			return;

		if(schedulerDataStructure -> count == 1)
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <refreshBuffer+0x140>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	7a1b      	ldrb	r3, [r3, #8]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d111      	bne.n	80009fe <refreshBuffer+0x4a>
		{
			BufferTimer -> Period = schedulerDataStructure -> head -> Period;
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <refreshBuffer+0x140>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <refreshBuffer+0x144>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6912      	ldr	r2, [r2, #16]
 80009e6:	609a      	str	r2, [r3, #8]
			BufferTimer -> Delay = BufferTimer -> Period;
 80009e8:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <refreshBuffer+0x144>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <refreshBuffer+0x144>)
 80009f0:	6811      	ldr	r1, [r2, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	f04f 0300 	mov.w	r3, #0
 80009f8:	e9c1 2300 	strd	r2, r3, [r1]
			return;
 80009fc:	e076      	b.n	8000aec <refreshBuffer+0x138>
		}

		struct sTask * temp_head = schedulerDataStructure -> head;
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <refreshBuffer+0x140>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
		struct sTask * temp_tail = schedulerDataStructure -> tail;
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <refreshBuffer+0x140>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	60bb      	str	r3, [r7, #8]

	//	while(temp_head != temp_tail /*for case with odd number count*/
	//			&& temp_head -> previous != temp_tail && temp_tail -> next != temp_head
	//			/*for case with even number of count*/)
		AmountTasks limit = (schedulerDataStructure -> count) / 2;
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <refreshBuffer+0x140>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	7a1b      	ldrb	r3, [r3, #8]
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	71bb      	strb	r3, [r7, #6]
		AmountTasks isOdd = (schedulerDataStructure -> count) % 2;
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <refreshBuffer+0x140>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	7a1b      	ldrb	r3, [r3, #8]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	717b      	strb	r3, [r7, #5]
		for(AmountTasks i = 0 ; i < limit ; i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	e036      	b.n	8000a98 <refreshBuffer+0xe4>
		{
			if(temp_head != NULL)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d016      	beq.n	8000a5e <refreshBuffer+0xaa>
			{
				if(temp_head -> Delay < BufferTimer -> Period)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <refreshBuffer+0x144>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	4290      	cmp	r0, r2
 8000a44:	eb71 0303 	sbcs.w	r3, r1, r3
 8000a48:	da06      	bge.n	8000a58 <refreshBuffer+0xa4>
					BufferTimer -> Period = temp_head -> Delay;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000a50:	4929      	ldr	r1, [pc, #164]	; (8000af8 <refreshBuffer+0x144>)
 8000a52:	6809      	ldr	r1, [r1, #0]
 8000a54:	4613      	mov	r3, r2
 8000a56:	608b      	str	r3, [r1, #8]

				temp_head = temp_head -> next;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	60fb      	str	r3, [r7, #12]
			}

			if(temp_tail != NULL)
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d016      	beq.n	8000a92 <refreshBuffer+0xde>
			{
				if(temp_tail -> Delay < BufferTimer -> Period)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <refreshBuffer+0x144>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	461a      	mov	r2, r3
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	4290      	cmp	r0, r2
 8000a78:	eb71 0303 	sbcs.w	r3, r1, r3
 8000a7c:	da06      	bge.n	8000a8c <refreshBuffer+0xd8>
					BufferTimer -> Period = temp_tail -> Delay;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000a84:	491c      	ldr	r1, [pc, #112]	; (8000af8 <refreshBuffer+0x144>)
 8000a86:	6809      	ldr	r1, [r1, #0]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	608b      	str	r3, [r1, #8]

				temp_tail = temp_tail -> previous;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	60bb      	str	r3, [r7, #8]
		for(AmountTasks i = 0 ; i < limit ; i++)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	3301      	adds	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3c4      	bcc.n	8000a2a <refreshBuffer+0x76>
			}
		}

		if(isOdd && temp_head != NULL)
 8000aa0:	797b      	ldrb	r3, [r7, #5]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d016      	beq.n	8000ad4 <refreshBuffer+0x120>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <refreshBuffer+0x120>
			//execute remain task due to if count is odd, the iterator above will stop when still remain task don't be executed
			//it has presented at middle index already due to iterator above so don't need get temp_head -> next
		{
			if(temp_head -> Delay < BufferTimer -> Period)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <refreshBuffer+0x144>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f04f 0300 	mov.w	r3, #0
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ac4:	da06      	bge.n	8000ad4 <refreshBuffer+0x120>
				BufferTimer -> Period = temp_head -> Delay;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000acc:	490a      	ldr	r1, [pc, #40]	; (8000af8 <refreshBuffer+0x144>)
 8000ace:	6809      	ldr	r1, [r1, #0]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	608b      	str	r3, [r1, #8]
		}


		BufferTimer -> Delay = BufferTimer -> Period;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <refreshBuffer+0x144>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <refreshBuffer+0x144>)
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e9c1 2300 	strd	r2, r3, [r1]
 8000ae8:	e000      	b.n	8000aec <refreshBuffer+0x138>
			return;
 8000aea:	bf00      	nop
}
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000094 	.word	0x20000094
 8000af8:	20000098 	.word	0x20000098

08000afc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
	if(schedulerDataStructure == NULL)
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <SCH_Dispatch_Tasks+0x98>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d040      	beq.n	8000b8c <SCH_Dispatch_Tasks+0x90>
		return;

	int64_t saveDelay = BufferTimer -> Delay;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SCH_Dispatch_Tasks+0x9c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b12:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t savePeriod = BufferTimer -> Period;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <SCH_Dispatch_Tasks+0x9c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	607b      	str	r3, [r7, #4]

	int32_t differenceCount = (int32_t) (schedulerDataStructure -> count - BufferTimer -> pastCount);
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <SCH_Dispatch_Tasks+0x98>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	7a1b      	ldrb	r3, [r3, #8]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <SCH_Dispatch_Tasks+0x9c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	7b1b      	ldrb	r3, [r3, #12]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	603b      	str	r3, [r7, #0]

	if(differenceCount > 0) ///more tasks be added
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dd02      	ble.n	8000b3c <SCH_Dispatch_Tasks+0x40>
	{
		dealWithTasksAdded(differenceCount);
 8000b36:	6838      	ldr	r0, [r7, #0]
 8000b38:	f7ff fda4 	bl	8000684 <dealWithTasksAdded>
	}

	if(BufferTimer -> Delay != saveDelay && differenceCount > 0)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <SCH_Dispatch_Tasks+0x9c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	bf08      	it	eq
 8000b4c:	4290      	cmpeq	r0, r2
 8000b4e:	d007      	beq.n	8000b60 <SCH_Dispatch_Tasks+0x64>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	dd04      	ble.n	8000b60 <SCH_Dispatch_Tasks+0x64>
		//Buffer delay be changed because have task with Delay lower so we need to update tasks in the SDS
		//but we also note that if timer interrupt occur so saveDelay also difference with delay current
		//so we need a certain condition that not change even if interrupt occurs, that is add more tasks to the SDS
	{
		ProcessBufferChanged(saveDelay, savePeriod);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b5c:	f7ff fdce 	bl	80006fc <ProcessBufferChanged>
	}

	if(differenceCount < 0) //update count because tasks be deleted
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da05      	bge.n	8000b72 <SCH_Dispatch_Tasks+0x76>
		BufferTimer -> pastCount = schedulerDataStructure -> count;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <SCH_Dispatch_Tasks+0x98>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <SCH_Dispatch_Tasks+0x9c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	7a12      	ldrb	r2, [r2, #8]
 8000b70:	731a      	strb	r2, [r3, #12]

	if(BufferTimer -> Delay <= 0)
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <SCH_Dispatch_Tasks+0x9c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7a:	2a01      	cmp	r2, #1
 8000b7c:	f173 0300 	sbcs.w	r3, r3, #0
 8000b80:	da05      	bge.n	8000b8e <SCH_Dispatch_Tasks+0x92>
	{
		Run_Tasks();
 8000b82:	f7ff fe23 	bl	80007cc <Run_Tasks>
		refreshBuffer();
 8000b86:	f7ff ff15 	bl	80009b4 <refreshBuffer>
 8000b8a:	e000      	b.n	8000b8e <SCH_Dispatch_Tasks+0x92>
		return;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000094 	.word	0x20000094
 8000b98:	20000098 	.word	0x20000098

08000b9c <SCH_Add_Task>:
//run software timer

uint32_t SCH_Add_Task(void (* pFunctionAdd)(), int64_t DELAY, uint32_t PERIOD)
{
 8000b9c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000ba0:	b089      	sub	sp, #36	; 0x24
 8000ba2:	af04      	add	r7, sp, #16
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	e9c7 2300 	strd	r2, r3, [r7]
	if(schedulerDataStructure == NULL)
 8000baa:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <SCH_Add_Task+0x100>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <SCH_Add_Task+0x1a>
		return 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e06c      	b.n	8000c90 <SCH_Add_Task+0xf4>

	if(schedulerDataStructure -> count == 0)
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <SCH_Add_Task+0x100>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	7a1b      	ldrb	r3, [r3, #8]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d12e      	bne.n	8000c1e <SCH_Add_Task+0x82>
	{
		schedulerDataStructure -> head = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK, 0, NULL, NULL);
 8000bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bc4:	f04f 020a 	mov.w	r2, #10
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	f7ff fabe 	bl	800014c <__aeabi_ldivmod>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <SCH_Add_Task+0x104>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	08db      	lsrs	r3, r3, #3
 8000be2:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <SCH_Add_Task+0x100>)
 8000be4:	6814      	ldr	r4, [r2, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	9203      	str	r2, [sp, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	9202      	str	r2, [sp, #8]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	9201      	str	r2, [sp, #4]
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fc5b 	bl	80004b4 <constructorsTaskWithParameters>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6023      	str	r3, [r4, #0]
		schedulerDataStructure -> tail = schedulerDataStructure -> head;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
		schedulerDataStructure -> count ++;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	7a1a      	ldrb	r2, [r3, #8]
 8000c14:	3201      	adds	r2, #1
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	721a      	strb	r2, [r3, #8]
		return 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e038      	b.n	8000c90 <SCH_Add_Task+0xf4>
	}

	schedulerDataStructure -> tail -> next = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK,
 8000c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c22:	f04f 020a 	mov.w	r2, #10
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	f7ff fa8f 	bl	800014c <__aeabi_ldivmod>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	4690      	mov	r8, r2
 8000c34:	4699      	mov	r9, r3
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <SCH_Add_Task+0x104>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	08db      	lsrs	r3, r3, #3
								(schedulerDataStructure -> tail -> TaskID) + 1, NULL, schedulerDataStructure -> tail);
 8000c40:	4a16      	ldr	r2, [pc, #88]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c42:	6812      	ldr	r2, [r2, #0]
 8000c44:	6852      	ldr	r2, [r2, #4]
 8000c46:	6952      	ldr	r2, [r2, #20]
	schedulerDataStructure -> tail -> next = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK,
 8000c48:	3201      	adds	r2, #1
								(schedulerDataStructure -> tail -> TaskID) + 1, NULL, schedulerDataStructure -> tail);
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c4c:	6809      	ldr	r1, [r1, #0]
	schedulerDataStructure -> tail -> next = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK,
 8000c4e:	6849      	ldr	r1, [r1, #4]
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c52:	6800      	ldr	r0, [r0, #0]
 8000c54:	6844      	ldr	r4, [r0, #4]
 8000c56:	9103      	str	r1, [sp, #12]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	9102      	str	r1, [sp, #8]
 8000c5c:	9201      	str	r2, [sp, #4]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4642      	mov	r2, r8
 8000c62:	464b      	mov	r3, r9
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff fc25 	bl	80004b4 <constructorsTaskWithParameters>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	61a3      	str	r3, [r4, #24]

	schedulerDataStructure -> tail = schedulerDataStructure -> tail -> next;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6992      	ldr	r2, [r2, #24]
 8000c7a:	605a      	str	r2, [r3, #4]

	schedulerDataStructure -> count ++;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	7a1a      	ldrb	r2, [r3, #8]
 8000c82:	3201      	adds	r2, #1
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	721a      	strb	r2, [r3, #8]

	return schedulerDataStructure -> tail -> TaskID;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SCH_Add_Task+0x100>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	cccccccd 	.word	0xcccccccd

08000ca4 <init_state_button>:
bool ButtonFlagBuffer[MAX_BUTTON];

int TimeOutForKeyPressBuffer[MAX_BUTTON];

void init_state_button()
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < MAX_BUTTON ; i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e020      	b.n	8000cf2 <init_state_button+0x4e>
	{
		KeyReg0Buffer [i] = NORMAL_STATE;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <init_state_button+0x60>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
		KeyReg1Buffer [i] = NORMAL_STATE;
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <init_state_button+0x64>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
		KeyReg2Buffer [i] = NORMAL_STATE;
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <init_state_button+0x68>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
		KeyReg3Buffer [i] = NORMAL_STATE;
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <init_state_button+0x6c>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]

		ButtonFlagBuffer [i] = 0;
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <init_state_button+0x70>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]

		TimeOutForKeyPressBuffer[i] = TimeForLongPress/TICK;
 8000ce2:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <init_state_button+0x74>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2132      	movs	r1, #50	; 0x32
 8000ce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < MAX_BUTTON ; i++)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	dddb      	ble.n	8000cb0 <init_state_button+0xc>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000108 	.word	0x20000108
 8000d08:	2000010c 	.word	0x2000010c
 8000d0c:	200000f4 	.word	0x200000f4
 8000d10:	200000f8 	.word	0x200000f8
 8000d14:	20000110 	.word	0x20000110
 8000d18:	200000fc 	.word	0x200000fc

08000d1c <getButtonFlagAtIndex>:

bool getButtonFlagAtIndex(int index)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	if(index >= MAX_BUTTON)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	dd01      	ble.n	8000d2e <getButtonFlagAtIndex+0x12>
		return 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e003      	b.n	8000d36 <getButtonFlagAtIndex+0x1a>

	return ButtonFlagBuffer[index];
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <getButtonFlagAtIndex+0x24>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	20000110 	.word	0x20000110

08000d44 <ResetButtonFlagAtIndex>:

void ResetButtonFlagAtIndex(int index)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if(index >= MAX_BUTTON)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	dc05      	bgt.n	8000d5e <ResetButtonFlagAtIndex+0x1a>
		return;

	ButtonFlagBuffer[index] = 0;
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <ResetButtonFlagAtIndex+0x24>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	e000      	b.n	8000d60 <ResetButtonFlagAtIndex+0x1c>
		return;
 8000d5e:	bf00      	nop
}
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000110 	.word	0x20000110

08000d6c <getKeyInput>:

void getKeyInput()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e014      	b.n	8000da2 <getKeyInput+0x36>
	{
		KeyReg2Buffer [i] = KeyReg1Buffer [i];
 8000d78:	4a51      	ldr	r2, [pc, #324]	; (8000ec0 <getKeyInput+0x154>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	7819      	ldrb	r1, [r3, #0]
 8000d80:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <getKeyInput+0x158>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4413      	add	r3, r2
 8000d86:	460a      	mov	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
		KeyReg1Buffer [i] = KeyReg0Buffer [i];
 8000d8a:	4a4f      	ldr	r2, [pc, #316]	; (8000ec8 <getKeyInput+0x15c>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	7819      	ldrb	r1, [r3, #0]
 8000d92:	4a4b      	ldr	r2, [pc, #300]	; (8000ec0 <getKeyInput+0x154>)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	460a      	mov	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	dde7      	ble.n	8000d78 <getKeyInput+0xc>
	}

	KeyReg0Buffer[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dac:	4847      	ldr	r0, [pc, #284]	; (8000ecc <getKeyInput+0x160>)
 8000dae:	f001 fc0d 	bl	80025cc <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <getKeyInput+0x15c>)
 8000db8:	701a      	strb	r2, [r3, #0]
	KeyReg0Buffer[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	4843      	ldr	r0, [pc, #268]	; (8000ecc <getKeyInput+0x160>)
 8000dc0:	f001 fc04 	bl	80025cc <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <getKeyInput+0x15c>)
 8000dca:	705a      	strb	r2, [r3, #1]
	KeyReg0Buffer[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	483e      	ldr	r0, [pc, #248]	; (8000ecc <getKeyInput+0x160>)
 8000dd2:	f001 fbfb 	bl	80025cc <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b3b      	ldr	r3, [pc, #236]	; (8000ec8 <getKeyInput+0x15c>)
 8000ddc:	709a      	strb	r2, [r3, #2]

	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	e064      	b.n	8000eae <getKeyInput+0x142>
	{
		bool temp = KeyReg3Buffer[i];
 8000de4:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <getKeyInput+0x164>)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	71fb      	strb	r3, [r7, #7]

		if(KeyReg1Buffer[i] == KeyReg0Buffer[i] && KeyReg1Buffer [i] == KeyReg2Buffer[i]) //same each other
 8000dee:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <getKeyInput+0x154>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4413      	add	r3, r2
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4934      	ldr	r1, [pc, #208]	; (8000ec8 <getKeyInput+0x15c>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d10e      	bne.n	8000e20 <getKeyInput+0xb4>
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <getKeyInput+0x154>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4413      	add	r3, r2
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	492e      	ldr	r1, [pc, #184]	; (8000ec4 <getKeyInput+0x158>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	440b      	add	r3, r1
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d104      	bne.n	8000e20 <getKeyInput+0xb4>
			temp = KeyReg2Buffer[i];
 8000e16:	4a2b      	ldr	r2, [pc, #172]	; (8000ec4 <getKeyInput+0x158>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]

		if(KeyReg3Buffer [i] != temp)
 8000e20:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <getKeyInput+0x164>)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d005      	beq.n	8000e3a <getKeyInput+0xce>
			KeyReg3Buffer[i] = temp;
 8000e2e:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <getKeyInput+0x164>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4413      	add	r3, r2
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e00e      	b.n	8000e58 <getKeyInput+0xec>

		//if it is pressed and long pressed we will minus time out and update it as Long Pressed
		//if we use else command we will have a problem when NOT PRESSED state we also minus time out
		//and if it is pressed at time out <  origin Time For Long Press we will determine it as long pressed
		else if(KeyReg3Buffer[i] == (bool)PRESSED_STATE)
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <getKeyInput+0x164>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d108      	bne.n	8000e58 <getKeyInput+0xec>
			TimeOutForKeyPressBuffer[i] -= 1;
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <getKeyInput+0x168>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	4920      	ldr	r1, [pc, #128]	; (8000ed4 <getKeyInput+0x168>)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//if it is pressed but TimeOutForKeyPressBuffer larger on or equal to origin Time For Long Press we will define it as pressed one time
		if(KeyReg3Buffer[i] == (bool)PRESSED_STATE && TimeOutForKeyPressBuffer[i] >= TimeForLongPress/TICK)
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <getKeyInput+0x164>)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10b      	bne.n	8000e7c <getKeyInput+0x110>
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <getKeyInput+0x168>)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	2b31      	cmp	r3, #49	; 0x31
 8000e6e:	dd05      	ble.n	8000e7c <getKeyInput+0x110>
		{
			ButtonFlagBuffer[i] = 1;
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <getKeyInput+0x16c>)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e015      	b.n	8000ea8 <getKeyInput+0x13c>
		}

		//if it is pressed and TimeOutForKeyPressBuffer equal to zero we will define it as long pressed
		else if(KeyReg3Buffer[i] == (bool)PRESSED_STATE && TimeOutForKeyPressBuffer[i] <= 0)
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <getKeyInput+0x164>)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10f      	bne.n	8000ea8 <getKeyInput+0x13c>
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <getKeyInput+0x168>)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dc09      	bgt.n	8000ea8 <getKeyInput+0x13c>
		{
			ButtonFlagBuffer[i] = 1;
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <getKeyInput+0x16c>)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
			TimeOutForKeyPressBuffer[i] = TimeForLongPress/TICK;
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <getKeyInput+0x168>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	2132      	movs	r1, #50	; 0x32
 8000ea4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < MAX_BUTTON ; i++)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	dd97      	ble.n	8000de4 <getKeyInput+0x78>
//		        	}
//		        }
//		    }
//		  }
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000010c 	.word	0x2000010c
 8000ec4:	200000f4 	.word	0x200000f4
 8000ec8:	20000108 	.word	0x20000108
 8000ecc:	40010c00 	.word	0x40010c00
 8000ed0:	200000f8 	.word	0x200000f8
 8000ed4:	200000fc 	.word	0x200000fc
 8000ed8:	20000110 	.word	0x20000110

08000edc <fsm_automatic>:
 *  Created on: Oct 28, 2024
 *      Author: 84898
 */
#include "global.h"
void fsm_automatic()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
		if(TimeForRed != TimeForAmber + TimeForGreen + 1)
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <fsm_automatic+0x40>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <fsm_automatic+0x44>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4413      	add	r3, r2
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <fsm_automatic+0x48>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d008      	beq.n	8000f06 <fsm_automatic+0x2a>
		{
			TimeForAmber = 0;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <fsm_automatic+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
			TimeForRed = 0;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <fsm_automatic+0x48>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
			TimeForGreen = 0;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <fsm_automatic+0x44>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		}

		if(Onepass)
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <fsm_automatic+0x4c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <fsm_automatic+0x36>
		UpdateTimeDecrease();
 8000f0e:	f000 fec3 	bl	8001c98 <UpdateTimeDecrease>

		traffic_light();
 8000f12:	f000 ffb5 	bl	8001e80 <traffic_light>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000d0 	.word	0x200000d0
 8000f20:	200000d4 	.word	0x200000d4
 8000f24:	200000cc 	.word	0x200000cc
 8000f28:	200000e8 	.word	0x200000e8

08000f2c <updateTempsForFSMManual>:
int tempMode3 = 0;

int tempMode4 = 0;

void updateTempsForFSMManual()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	tempMode2 = TimeForRed;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <updateTempsForFSMManual+0x24>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <updateTempsForFSMManual+0x28>)
 8000f36:	6013      	str	r3, [r2, #0]

	tempMode3 = TimeForAmber;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <updateTempsForFSMManual+0x2c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <updateTempsForFSMManual+0x30>)
 8000f3e:	6013      	str	r3, [r2, #0]

	tempMode4 = TimeForGreen;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <updateTempsForFSMManual+0x34>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <updateTempsForFSMManual+0x38>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	200000cc 	.word	0x200000cc
 8000f54:	200000a0 	.word	0x200000a0
 8000f58:	200000d0 	.word	0x200000d0
 8000f5c:	200000a4 	.word	0x200000a4
 8000f60:	200000d4 	.word	0x200000d4
 8000f64:	200000a8 	.word	0x200000a8

08000f68 <mode2>:

void mode2() //set duration for RED LEDs
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	update7SegBufferForOdd(02); //display mode number
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f000 fe4b 	bl	8001c08 <update7SegBufferForOdd>

	if(IsOneSecondPassed())
 8000f72:	f000 fd45 	bl	8001a00 <IsOneSecondPassed>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00b      	beq.n	8000f94 <mode2+0x2c>
	{
		FlagToggle = !FlagToggle;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <mode2+0xa4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <mode2+0xa4>)
 8000f8e:	701a      	strb	r2, [r3, #0]
		clearOneSecondFlag();
 8000f90:	f000 fd40 	bl	8001a14 <clearOneSecondFlag>
	}

	if(FlagToggle)
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <mode2+0xa4>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <mode2+0x3e>
	{
		turnOnLedRedForOdd();
 8000f9c:	f000 fecc 	bl	8001d38 <turnOnLedRedForOdd>
		turnOnLedRedForEven();
 8000fa0:	f000 feb8 	bl	8001d14 <turnOnLedRedForEven>
 8000fa4:	e001      	b.n	8000faa <mode2+0x42>
	}

	else
	{
		clearAllLed();
 8000fa6:	f000 ff21 	bl	8001dec <clearAllLed>
	}

	if(getButtonFlagAtIndex(1)) //button 2 is pressed
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff feb6 	bl	8000d1c <getButtonFlagAtIndex>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01a      	beq.n	8000fec <mode2+0x84>
	{
		tempMode2++;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <mode2+0xa8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <mode2+0xa8>)
 8000fbe:	6013      	str	r3, [r2, #0]
		tempMode2 = tempMode2 % 100; //Max 99
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <mode2+0xa8>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <mode2+0xac>)
 8000fc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000fca:	1159      	asrs	r1, r3, #5
 8000fcc:	17d3      	asrs	r3, r2, #31
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	2164      	movs	r1, #100	; 0x64
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <mode2+0xa8>)
 8000fda:	6013      	str	r3, [r2, #0]

		update7SegBufferForEven(tempMode2); //display duration set
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <mode2+0xa8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fe35 	bl	8001c50 <update7SegBufferForEven>

		ResetButtonFlagAtIndex(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff feac 	bl	8000d44 <ResetButtonFlagAtIndex>
	}

	if(getButtonFlagAtIndex(2)) //button 3 is pressed
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff fe95 	bl	8000d1c <getButtonFlagAtIndex>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <mode2+0x9e>
	{
		TimeForRed = tempMode2;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <mode2+0xa8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <mode2+0xb0>)
 8000ffe:	6013      	str	r3, [r2, #0]

		ResetButtonFlagAtIndex(2);
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fe9f 	bl	8000d44 <ResetButtonFlagAtIndex>
	}
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000009c 	.word	0x2000009c
 8001010:	200000a0 	.word	0x200000a0
 8001014:	51eb851f 	.word	0x51eb851f
 8001018:	200000cc 	.word	0x200000cc

0800101c <mode3>:

void mode3() //set Duration for Amber Leds
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	update7SegBufferForOdd(03); //display mode number
 8001020:	2003      	movs	r0, #3
 8001022:	f000 fdf1 	bl	8001c08 <update7SegBufferForOdd>

	if(IsOneSecondPassed())
 8001026:	f000 fceb 	bl	8001a00 <IsOneSecondPassed>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <mode3+0x2c>
	{
		FlagToggle = !FlagToggle;
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <mode3+0xb0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <mode3+0xb0>)
 8001042:	701a      	strb	r2, [r3, #0]
		clearOneSecondFlag();
 8001044:	f000 fce6 	bl	8001a14 <clearOneSecondFlag>
	}

	if(FlagToggle)
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <mode3+0xb0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <mode3+0x3e>
	{
		turnOnLedAmberForOdd();
 8001050:	f000 fe96 	bl	8001d80 <turnOnLedAmberForOdd>
		turnOnLedAmberForEven();
 8001054:	f000 fe82 	bl	8001d5c <turnOnLedAmberForEven>
 8001058:	e001      	b.n	800105e <mode3+0x42>
	}

	else
	{
		clearAllLed();
 800105a:	f000 fec7 	bl	8001dec <clearAllLed>
	}

	if(getButtonFlagAtIndex(1)) //button 2 is pressed And don't exceed time Red leds
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fe5c 	bl	8000d1c <getButtonFlagAtIndex>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01a      	beq.n	80010a0 <mode3+0x84>
	{
		tempMode3++;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <mode3+0xb4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <mode3+0xb4>)
 8001072:	6013      	str	r3, [r2, #0]
		tempMode3 = tempMode3 % 100; //Max 99
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <mode3+0xb4>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <mode3+0xb8>)
 800107a:	fb83 1302 	smull	r1, r3, r3, r2
 800107e:	1159      	asrs	r1, r3, #5
 8001080:	17d3      	asrs	r3, r2, #31
 8001082:	1acb      	subs	r3, r1, r3
 8001084:	2164      	movs	r1, #100	; 0x64
 8001086:	fb01 f303 	mul.w	r3, r1, r3
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <mode3+0xb4>)
 800108e:	6013      	str	r3, [r2, #0]
		update7SegBufferForEven(tempMode3); //display duration set
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <mode3+0xb4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fddb 	bl	8001c50 <update7SegBufferForEven>
		ResetButtonFlagAtIndex(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff fe52 	bl	8000d44 <ResetButtonFlagAtIndex>
	}

	if(getButtonFlagAtIndex(2)) //button 3 is pressed
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff fe3b 	bl	8000d1c <getButtonFlagAtIndex>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <mode3+0xaa>
	{
		if(tempMode3 < TimeForRed)
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <mode3+0xb4>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <mode3+0xbc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	da03      	bge.n	80010c0 <mode3+0xa4>
			TimeForAmber = tempMode3;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <mode3+0xb4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <mode3+0xc0>)
 80010be:	6013      	str	r3, [r2, #0]

//		TimeForGreen = TimeForRed - TimeForAmber - 1; //reassign Time for Green Leds

		ResetButtonFlagAtIndex(2);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff fe3f 	bl	8000d44 <ResetButtonFlagAtIndex>
	}
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000009c 	.word	0x2000009c
 80010d0:	200000a4 	.word	0x200000a4
 80010d4:	51eb851f 	.word	0x51eb851f
 80010d8:	200000cc 	.word	0x200000cc
 80010dc:	200000d0 	.word	0x200000d0

080010e0 <mode4>:

void mode4()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	update7SegBufferForOdd(04); //display mode number
 80010e4:	2004      	movs	r0, #4
 80010e6:	f000 fd8f 	bl	8001c08 <update7SegBufferForOdd>

	if(IsOneSecondPassed())
 80010ea:	f000 fc89 	bl	8001a00 <IsOneSecondPassed>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <mode4+0x2c>
	{
		FlagToggle = !FlagToggle;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <mode4+0xb8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <mode4+0xb8>)
 8001106:	701a      	strb	r2, [r3, #0]
		clearOneSecondFlag();
 8001108:	f000 fc84 	bl	8001a14 <clearOneSecondFlag>
	}

	if(FlagToggle)
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <mode4+0xb8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <mode4+0x3e>
	{
		turnOnLedGreenForOdd();
 8001114:	f000 fe58 	bl	8001dc8 <turnOnLedGreenForOdd>
		turnOnLedGreenForEven();
 8001118:	f000 fe44 	bl	8001da4 <turnOnLedGreenForEven>
 800111c:	e001      	b.n	8001122 <mode4+0x42>
	}

	else
	{
		clearAllLed();
 800111e:	f000 fe65 	bl	8001dec <clearAllLed>
	}

	if(getButtonFlagAtIndex(1)) //button 2 is pressed And don't exceed time Red leds
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff fdfa 	bl	8000d1c <getButtonFlagAtIndex>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d01a      	beq.n	8001164 <mode4+0x84>
	{
		tempMode4++;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <mode4+0xbc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <mode4+0xbc>)
 8001136:	6013      	str	r3, [r2, #0]
		tempMode4 = tempMode4 % 100; //Max 99
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <mode4+0xbc>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <mode4+0xc0>)
 800113e:	fb83 1302 	smull	r1, r3, r3, r2
 8001142:	1159      	asrs	r1, r3, #5
 8001144:	17d3      	asrs	r3, r2, #31
 8001146:	1acb      	subs	r3, r1, r3
 8001148:	2164      	movs	r1, #100	; 0x64
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <mode4+0xbc>)
 8001152:	6013      	str	r3, [r2, #0]
		update7SegBufferForEven(tempMode4); //display duration set
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <mode4+0xbc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd79 	bl	8001c50 <update7SegBufferForEven>

		ResetButtonFlagAtIndex(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fdf0 	bl	8000d44 <ResetButtonFlagAtIndex>
	}

	if(getButtonFlagAtIndex(2)) //button 3 is pressed
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fdd9 	bl	8000d1c <getButtonFlagAtIndex>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d010      	beq.n	8001192 <mode4+0xb2>
	{
		if(tempMode4 <= TimeForRed - TimeForAmber)
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <mode4+0xc4>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <mode4+0xc8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <mode4+0xbc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	db04      	blt.n	800118c <mode4+0xac>
			TimeForGreen = tempMode4 - 1;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <mode4+0xbc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <mode4+0xcc>)
 800118a:	6013      	str	r3, [r2, #0]

//		TimeForAmber = TimeForRed - TimeForGreen - 1; //reassign Time for Amber Leds

		ResetButtonFlagAtIndex(2);
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff fdd9 	bl	8000d44 <ResetButtonFlagAtIndex>
	}
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000009c 	.word	0x2000009c
 800119c:	200000a8 	.word	0x200000a8
 80011a0:	51eb851f 	.word	0x51eb851f
 80011a4:	200000cc 	.word	0x200000cc
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	200000d4 	.word	0x200000d4

080011b0 <fsm_manual>:

void fsm_manual()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if(Onepass)
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <fsm_manual+0x64>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <fsm_manual+0x16>
	{
		updateTempsForFSMManual();
 80011bc:	f7ff feb6 	bl	8000f2c <updateTempsForFSMManual>
		Onepass = 0;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <fsm_manual+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	}

	switch (getCurrentMode())
 80011c6:	f000 f82d 	bl	8001224 <getCurrentMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d016      	beq.n	80011fe <fsm_manual+0x4e>
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	dc1c      	bgt.n	800120e <fsm_manual+0x5e>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d002      	beq.n	80011de <fsm_manual+0x2e>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d008      	beq.n	80011ee <fsm_manual+0x3e>
		case 3:
			update7SegBufferForEven(tempMode4);
			mode4();
			break;
		default:
			break;
 80011dc:	e017      	b.n	800120e <fsm_manual+0x5e>
			update7SegBufferForEven(tempMode2);
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <fsm_manual+0x68>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fd34 	bl	8001c50 <update7SegBufferForEven>
			mode2();
 80011e8:	f7ff febe 	bl	8000f68 <mode2>
			break;
 80011ec:	e010      	b.n	8001210 <fsm_manual+0x60>
			update7SegBufferForEven(tempMode3);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <fsm_manual+0x6c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd2c 	bl	8001c50 <update7SegBufferForEven>
			mode3();
 80011f8:	f7ff ff10 	bl	800101c <mode3>
			break;
 80011fc:	e008      	b.n	8001210 <fsm_manual+0x60>
			update7SegBufferForEven(tempMode4);
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <fsm_manual+0x70>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fd24 	bl	8001c50 <update7SegBufferForEven>
			mode4();
 8001208:	f7ff ff6a 	bl	80010e0 <mode4>
			break;
 800120c:	e000      	b.n	8001210 <fsm_manual+0x60>
			break;
 800120e:	bf00      	nop
	}

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000e8 	.word	0x200000e8
 8001218:	200000a0 	.word	0x200000a0
 800121c:	200000a4 	.word	0x200000a4
 8001220:	200000a8 	.word	0x200000a8

08001224 <getCurrentMode>:
{
	current_mode = CurrentMode;
}

int getCurrentMode()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return current_mode;
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <getCurrentMode+0x10>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	200000ac 	.word	0x200000ac

08001238 <fsm_setting>:

void fsm_setting()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if(getButtonFlagAtIndex(0))
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fd6d 	bl	8000d1c <getButtonFlagAtIndex>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d015      	beq.n	8001274 <fsm_setting+0x3c>
	{
		Onepass = 1;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <fsm_setting+0x54>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
		current_mode ++;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <fsm_setting+0x58>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <fsm_setting+0x58>)
 8001256:	6013      	str	r3, [r2, #0]
		current_mode = current_mode % 4;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <fsm_setting+0x58>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	425a      	negs	r2, r3
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	bf58      	it	pl
 8001268:	4253      	negpl	r3, r2
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <fsm_setting+0x58>)
 800126c:	6013      	str	r3, [r2, #0]
		ResetButtonFlagAtIndex(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fd68 	bl	8000d44 <ResetButtonFlagAtIndex>
	}

	if(current_mode == 0)
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <fsm_setting+0x58>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <fsm_setting+0x4a>
		fsm_automatic();
 800127c:	f7ff fe2e 	bl	8000edc <fsm_automatic>

	else
	{
		fsm_manual();
	}
}
 8001280:	e001      	b.n	8001286 <fsm_setting+0x4e>
		fsm_manual();
 8001282:	f7ff ff95 	bl	80011b0 <fsm_manual>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000e8 	.word	0x200000e8
 8001290:	200000ac 	.word	0x200000ac

08001294 <blink_led>:

int counter_blinkLed = TIME_BLINK/TICK;


void blink_led()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	counter_blinkLed--;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <blink_led+0x28>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a07      	ldr	r2, [pc, #28]	; (80012bc <blink_led+0x28>)
 80012a0:	6013      	str	r3, [r2, #0]

	if(counter_blinkLed <= 0)
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <blink_led+0x28>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc06      	bgt.n	80012b8 <blink_led+0x24>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80012aa:	2120      	movs	r1, #32
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <blink_led+0x2c>)
 80012ae:	f001 f9bc 	bl	800262a <HAL_GPIO_TogglePin>
//		clearOneSecondFlag();
		counter_blinkLed = TIME_BLINK/TICK;
 80012b2:	4b02      	ldr	r3, [pc, #8]	; (80012bc <blink_led+0x28>)
 80012b4:	2264      	movs	r2, #100	; 0x64
 80012b6:	601a      	str	r2, [r3, #0]
	}
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	40010800 	.word	0x40010800

080012c4 <Set7SegBufferAtIndex>:
#include "global.h"

int led_buffer[MAX_LED] = {0, 0, 0, 0};

void Set7SegBufferAtIndex(int index, int value)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	if(index >= MAX_LED)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	dc05      	bgt.n	80012e0 <Set7SegBufferAtIndex+0x1c>
	{
		return;
	}

	led_buffer [index] = value;
 80012d4:	4905      	ldr	r1, [pc, #20]	; (80012ec <Set7SegBufferAtIndex+0x28>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012de:	e000      	b.n	80012e2 <Set7SegBufferAtIndex+0x1e>
		return;
 80012e0:	bf00      	nop
}
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200000b0 	.word	0x200000b0

080012f0 <update7SEG>:
	return led_buffer[index];
}


void update7SEG ( int index )
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if(index >= MAX_LED)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	dd01      	ble.n	8001302 <update7SEG+0x12>
	{
		index = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d87f      	bhi.n	8001408 <update7SEG+0x118>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <update7SEG+0x20>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	0800135b 	.word	0x0800135b
 8001318:	08001395 	.word	0x08001395
 800131c:	080013cf 	.word	0x080013cf

	 switch ( index )
	 {
		 case 0:
		 // Display the first 7 SEG with led_buffer [0]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	483b      	ldr	r0, [pc, #236]	; (8001414 <update7SEG+0x124>)
 8001326:	f001 f968 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	4838      	ldr	r0, [pc, #224]	; (8001414 <update7SEG+0x124>)
 8001332:	f001 f962 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 1);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	4835      	ldr	r0, [pc, #212]	; (8001414 <update7SEG+0x124>)
 800133e:	f001 f95c 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001348:	4832      	ldr	r0, [pc, #200]	; (8001414 <update7SEG+0x124>)
 800134a:	f001 f956 	bl	80025fa <HAL_GPIO_WritePin>
				display7SEG(led_buffer [0]);
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <update7SEG+0x128>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f862 	bl	800141c <display7SEG>
			 break ;
 8001358:	e057      	b.n	800140a <update7SEG+0x11a>
		 case 1:
		 // Display the second 7 SEG with led_buffer [1]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 1);
 800135a:	2201      	movs	r2, #1
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	482d      	ldr	r0, [pc, #180]	; (8001414 <update7SEG+0x124>)
 8001360:	f001 f94b 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136a:	482a      	ldr	r0, [pc, #168]	; (8001414 <update7SEG+0x124>)
 800136c:	f001 f945 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4827      	ldr	r0, [pc, #156]	; (8001414 <update7SEG+0x124>)
 8001378:	f001 f93f 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001382:	4824      	ldr	r0, [pc, #144]	; (8001414 <update7SEG+0x124>)
 8001384:	f001 f939 	bl	80025fa <HAL_GPIO_WritePin>
				display7SEG(led_buffer [1]);
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <update7SEG+0x128>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f845 	bl	800141c <display7SEG>
			 break ;
 8001392:	e03a      	b.n	800140a <update7SEG+0x11a>
		 case 2:
		 // Display the third 7 SEG with led_buffer [2]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <update7SEG+0x124>)
 800139a:	f001 f92e 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a4:	481b      	ldr	r0, [pc, #108]	; (8001414 <update7SEG+0x124>)
 80013a6:	f001 f928 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <update7SEG+0x124>)
 80013b2:	f001 f922 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013bc:	4815      	ldr	r0, [pc, #84]	; (8001414 <update7SEG+0x124>)
 80013be:	f001 f91c 	bl	80025fa <HAL_GPIO_WritePin>
				display7SEG(led_buffer [2]);
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <update7SEG+0x128>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f828 	bl	800141c <display7SEG>
			 break ;
 80013cc:	e01d      	b.n	800140a <update7SEG+0x11a>
		 case 3:
		 // Display the forth 7 SEG with led_buffer [3]
				HAL_GPIO_WritePin(ANOT_COMMON_1_GPIO_Port, ANOT_COMMON_1_Pin, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <update7SEG+0x124>)
 80013d4:	f001 f911 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_2_GPIO_Port, ANOT_COMMON_2_Pin, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <update7SEG+0x124>)
 80013e0:	f001 f90b 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_3_GPIO_Port, ANOT_COMMON_3_Pin, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	480a      	ldr	r0, [pc, #40]	; (8001414 <update7SEG+0x124>)
 80013ec:	f001 f905 	bl	80025fa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ANOT_COMMON_4_GPIO_Port, ANOT_COMMON_4_Pin, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <update7SEG+0x124>)
 80013f8:	f001 f8ff 	bl	80025fa <HAL_GPIO_WritePin>
				display7SEG(led_buffer [3]);
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <update7SEG+0x128>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f80b 	bl	800141c <display7SEG>
			 break ;
 8001406:	e000      	b.n	800140a <update7SEG+0x11a>
		 default :
			 break ;
 8001408:	bf00      	nop
	 }
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010c00 	.word	0x40010c00
 8001418:	200000b0 	.word	0x200000b0

0800141c <display7SEG>:


void display7SEG ( int counter)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b08      	cmp	r3, #8
 8001428:	f200 815a 	bhi.w	80016e0 <display7SEG+0x2c4>
 800142c:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <display7SEG+0x18>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001459 	.word	0x08001459
 8001438:	080014a1 	.word	0x080014a1
 800143c:	080014e9 	.word	0x080014e9
 8001440:	08001531 	.word	0x08001531
 8001444:	08001579 	.word	0x08001579
 8001448:	080015c1 	.word	0x080015c1
 800144c:	08001609 	.word	0x08001609
 8001450:	08001651 	.word	0x08001651
 8001454:	08001699 	.word	0x08001699
	switch(counter)
	{
		case 0:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2101      	movs	r1, #1
 800145c:	48b4      	ldr	r0, [pc, #720]	; (8001730 <display7SEG+0x314>)
 800145e:	f001 f8cc 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2102      	movs	r1, #2
 8001466:	48b2      	ldr	r0, [pc, #712]	; (8001730 <display7SEG+0x314>)
 8001468:	f001 f8c7 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2104      	movs	r1, #4
 8001470:	48af      	ldr	r0, [pc, #700]	; (8001730 <display7SEG+0x314>)
 8001472:	f001 f8c2 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	48ad      	ldr	r0, [pc, #692]	; (8001730 <display7SEG+0x314>)
 800147c:	f001 f8bd 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	48aa      	ldr	r0, [pc, #680]	; (8001730 <display7SEG+0x314>)
 8001486:	f001 f8b8 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2120      	movs	r1, #32
 800148e:	48a8      	ldr	r0, [pc, #672]	; (8001730 <display7SEG+0x314>)
 8001490:	f001 f8b3 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	48a5      	ldr	r0, [pc, #660]	; (8001730 <display7SEG+0x314>)
 800149a:	f001 f8ae 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 800149e:	e143      	b.n	8001728 <display7SEG+0x30c>
		case 1:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	48a2      	ldr	r0, [pc, #648]	; (8001730 <display7SEG+0x314>)
 80014a6:	f001 f8a8 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	48a0      	ldr	r0, [pc, #640]	; (8001730 <display7SEG+0x314>)
 80014b0:	f001 f8a3 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	489d      	ldr	r0, [pc, #628]	; (8001730 <display7SEG+0x314>)
 80014ba:	f001 f89e 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2108      	movs	r1, #8
 80014c2:	489b      	ldr	r0, [pc, #620]	; (8001730 <display7SEG+0x314>)
 80014c4:	f001 f899 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2110      	movs	r1, #16
 80014cc:	4898      	ldr	r0, [pc, #608]	; (8001730 <display7SEG+0x314>)
 80014ce:	f001 f894 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2120      	movs	r1, #32
 80014d6:	4896      	ldr	r0, [pc, #600]	; (8001730 <display7SEG+0x314>)
 80014d8:	f001 f88f 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2140      	movs	r1, #64	; 0x40
 80014e0:	4893      	ldr	r0, [pc, #588]	; (8001730 <display7SEG+0x314>)
 80014e2:	f001 f88a 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 80014e6:	e11f      	b.n	8001728 <display7SEG+0x30c>
		case 2:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2101      	movs	r1, #1
 80014ec:	4890      	ldr	r0, [pc, #576]	; (8001730 <display7SEG+0x314>)
 80014ee:	f001 f884 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2102      	movs	r1, #2
 80014f6:	488e      	ldr	r0, [pc, #568]	; (8001730 <display7SEG+0x314>)
 80014f8:	f001 f87f 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2104      	movs	r1, #4
 8001500:	488b      	ldr	r0, [pc, #556]	; (8001730 <display7SEG+0x314>)
 8001502:	f001 f87a 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2108      	movs	r1, #8
 800150a:	4889      	ldr	r0, [pc, #548]	; (8001730 <display7SEG+0x314>)
 800150c:	f001 f875 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2110      	movs	r1, #16
 8001514:	4886      	ldr	r0, [pc, #536]	; (8001730 <display7SEG+0x314>)
 8001516:	f001 f870 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2120      	movs	r1, #32
 800151e:	4884      	ldr	r0, [pc, #528]	; (8001730 <display7SEG+0x314>)
 8001520:	f001 f86b 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	4881      	ldr	r0, [pc, #516]	; (8001730 <display7SEG+0x314>)
 800152a:	f001 f866 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 800152e:	e0fb      	b.n	8001728 <display7SEG+0x30c>
		case 3:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	487e      	ldr	r0, [pc, #504]	; (8001730 <display7SEG+0x314>)
 8001536:	f001 f860 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2102      	movs	r1, #2
 800153e:	487c      	ldr	r0, [pc, #496]	; (8001730 <display7SEG+0x314>)
 8001540:	f001 f85b 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2104      	movs	r1, #4
 8001548:	4879      	ldr	r0, [pc, #484]	; (8001730 <display7SEG+0x314>)
 800154a:	f001 f856 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2108      	movs	r1, #8
 8001552:	4877      	ldr	r0, [pc, #476]	; (8001730 <display7SEG+0x314>)
 8001554:	f001 f851 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2110      	movs	r1, #16
 800155c:	4874      	ldr	r0, [pc, #464]	; (8001730 <display7SEG+0x314>)
 800155e:	f001 f84c 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2120      	movs	r1, #32
 8001566:	4872      	ldr	r0, [pc, #456]	; (8001730 <display7SEG+0x314>)
 8001568:	f001 f847 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	486f      	ldr	r0, [pc, #444]	; (8001730 <display7SEG+0x314>)
 8001572:	f001 f842 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 8001576:	e0d7      	b.n	8001728 <display7SEG+0x30c>
		case 4:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2101      	movs	r1, #1
 800157c:	486c      	ldr	r0, [pc, #432]	; (8001730 <display7SEG+0x314>)
 800157e:	f001 f83c 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2102      	movs	r1, #2
 8001586:	486a      	ldr	r0, [pc, #424]	; (8001730 <display7SEG+0x314>)
 8001588:	f001 f837 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2104      	movs	r1, #4
 8001590:	4867      	ldr	r0, [pc, #412]	; (8001730 <display7SEG+0x314>)
 8001592:	f001 f832 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2108      	movs	r1, #8
 800159a:	4865      	ldr	r0, [pc, #404]	; (8001730 <display7SEG+0x314>)
 800159c:	f001 f82d 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2110      	movs	r1, #16
 80015a4:	4862      	ldr	r0, [pc, #392]	; (8001730 <display7SEG+0x314>)
 80015a6:	f001 f828 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	4860      	ldr	r0, [pc, #384]	; (8001730 <display7SEG+0x314>)
 80015b0:	f001 f823 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	485d      	ldr	r0, [pc, #372]	; (8001730 <display7SEG+0x314>)
 80015ba:	f001 f81e 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 80015be:	e0b3      	b.n	8001728 <display7SEG+0x30c>
		case 5:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2101      	movs	r1, #1
 80015c4:	485a      	ldr	r0, [pc, #360]	; (8001730 <display7SEG+0x314>)
 80015c6:	f001 f818 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2102      	movs	r1, #2
 80015ce:	4858      	ldr	r0, [pc, #352]	; (8001730 <display7SEG+0x314>)
 80015d0:	f001 f813 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	4855      	ldr	r0, [pc, #340]	; (8001730 <display7SEG+0x314>)
 80015da:	f001 f80e 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2108      	movs	r1, #8
 80015e2:	4853      	ldr	r0, [pc, #332]	; (8001730 <display7SEG+0x314>)
 80015e4:	f001 f809 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2110      	movs	r1, #16
 80015ec:	4850      	ldr	r0, [pc, #320]	; (8001730 <display7SEG+0x314>)
 80015ee:	f001 f804 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2120      	movs	r1, #32
 80015f6:	484e      	ldr	r0, [pc, #312]	; (8001730 <display7SEG+0x314>)
 80015f8:	f000 ffff 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	484b      	ldr	r0, [pc, #300]	; (8001730 <display7SEG+0x314>)
 8001602:	f000 fffa 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 8001606:	e08f      	b.n	8001728 <display7SEG+0x30c>
		case 6:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2101      	movs	r1, #1
 800160c:	4848      	ldr	r0, [pc, #288]	; (8001730 <display7SEG+0x314>)
 800160e:	f000 fff4 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2102      	movs	r1, #2
 8001616:	4846      	ldr	r0, [pc, #280]	; (8001730 <display7SEG+0x314>)
 8001618:	f000 ffef 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2104      	movs	r1, #4
 8001620:	4843      	ldr	r0, [pc, #268]	; (8001730 <display7SEG+0x314>)
 8001622:	f000 ffea 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2108      	movs	r1, #8
 800162a:	4841      	ldr	r0, [pc, #260]	; (8001730 <display7SEG+0x314>)
 800162c:	f000 ffe5 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	483e      	ldr	r0, [pc, #248]	; (8001730 <display7SEG+0x314>)
 8001636:	f000 ffe0 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	483c      	ldr	r0, [pc, #240]	; (8001730 <display7SEG+0x314>)
 8001640:	f000 ffdb 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	4839      	ldr	r0, [pc, #228]	; (8001730 <display7SEG+0x314>)
 800164a:	f000 ffd6 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 800164e:	e06b      	b.n	8001728 <display7SEG+0x30c>
		case 7:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2101      	movs	r1, #1
 8001654:	4836      	ldr	r0, [pc, #216]	; (8001730 <display7SEG+0x314>)
 8001656:	f000 ffd0 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2102      	movs	r1, #2
 800165e:	4834      	ldr	r0, [pc, #208]	; (8001730 <display7SEG+0x314>)
 8001660:	f000 ffcb 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2104      	movs	r1, #4
 8001668:	4831      	ldr	r0, [pc, #196]	; (8001730 <display7SEG+0x314>)
 800166a:	f000 ffc6 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2108      	movs	r1, #8
 8001672:	482f      	ldr	r0, [pc, #188]	; (8001730 <display7SEG+0x314>)
 8001674:	f000 ffc1 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	482c      	ldr	r0, [pc, #176]	; (8001730 <display7SEG+0x314>)
 800167e:	f000 ffbc 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2120      	movs	r1, #32
 8001686:	482a      	ldr	r0, [pc, #168]	; (8001730 <display7SEG+0x314>)
 8001688:	f000 ffb7 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	4827      	ldr	r0, [pc, #156]	; (8001730 <display7SEG+0x314>)
 8001692:	f000 ffb2 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 8001696:	e047      	b.n	8001728 <display7SEG+0x30c>
		case 8:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	4824      	ldr	r0, [pc, #144]	; (8001730 <display7SEG+0x314>)
 800169e:	f000 ffac 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2102      	movs	r1, #2
 80016a6:	4822      	ldr	r0, [pc, #136]	; (8001730 <display7SEG+0x314>)
 80016a8:	f000 ffa7 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2104      	movs	r1, #4
 80016b0:	481f      	ldr	r0, [pc, #124]	; (8001730 <display7SEG+0x314>)
 80016b2:	f000 ffa2 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2108      	movs	r1, #8
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <display7SEG+0x314>)
 80016bc:	f000 ff9d 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2110      	movs	r1, #16
 80016c4:	481a      	ldr	r0, [pc, #104]	; (8001730 <display7SEG+0x314>)
 80016c6:	f000 ff98 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <display7SEG+0x314>)
 80016d0:	f000 ff93 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	4815      	ldr	r0, [pc, #84]	; (8001730 <display7SEG+0x314>)
 80016da:	f000 ff8e 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 80016de:	e023      	b.n	8001728 <display7SEG+0x30c>
		default:
		HAL_GPIO_WritePin(A_7_SEG_GPIO_Port, A_7_SEG_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2101      	movs	r1, #1
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <display7SEG+0x314>)
 80016e6:	f000 ff88 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_7_SEG_GPIO_Port, B_7_SEG_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2102      	movs	r1, #2
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <display7SEG+0x314>)
 80016f0:	f000 ff83 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_7_SEG_GPIO_Port, C_7_SEG_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2104      	movs	r1, #4
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <display7SEG+0x314>)
 80016fa:	f000 ff7e 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_7_SEG_GPIO_Port, D_7_SEG_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2108      	movs	r1, #8
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <display7SEG+0x314>)
 8001704:	f000 ff79 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_7_SEG_GPIO_Port, E_7_SEG_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	2110      	movs	r1, #16
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <display7SEG+0x314>)
 800170e:	f000 ff74 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_7_SEG_GPIO_Port, F_7_SEG_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2120      	movs	r1, #32
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <display7SEG+0x314>)
 8001718:	f000 ff6f 	bl	80025fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_7_SEG_GPIO_Port, G_7_SEG_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <display7SEG+0x314>)
 8001722:	f000 ff6a 	bl	80025fa <HAL_GPIO_WritePin>
			break;
 8001726:	bf00      	nop
	}
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40010c00 	.word	0x40010c00

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173a:	f000 fc5d 	bl	8001ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173e:	f000 f849 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f000 f8cf 	bl	80018e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001746:	f000 f881 	bl	800184c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2);
 800174a:	481c      	ldr	r0, [pc, #112]	; (80017bc <main+0x88>)
 800174c:	f001 fbb2 	bl	8002eb4 <HAL_TIM_Base_Start_IT>
  init_state_button();
 8001750:	f7ff faa8 	bl	8000ca4 <init_state_button>
  SCH_Init();
 8001754:	f7fe ff4c 	bl	80005f0 <SCH_Init>
  SCH_Add_Task(&blink_led, 0, 10);
 8001758:	230a      	movs	r3, #10
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	4816      	ldr	r0, [pc, #88]	; (80017c0 <main+0x8c>)
 8001766:	f7ff fa19 	bl	8000b9c <SCH_Add_Task>
  uint32_t temp = SCH_Add_Task(&ScanLed7Seg, 0, 10);
 800176a:	230a      	movs	r3, #10
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <main+0x90>)
 8001778:	f7ff fa10 	bl	8000b9c <SCH_Add_Task>
 800177c:	6078      	str	r0, [r7, #4]
  uint32_t temp2 = SCH_Add_Task(&timerRun, 0, 10);
 800177e:	230a      	movs	r3, #10
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <main+0x94>)
 800178c:	f7ff fa06 	bl	8000b9c <SCH_Add_Task>
 8001790:	6038      	str	r0, [r7, #0]
  SCH_Add_Task(&getKeyInput, 0, 10);
 8001792:	230a      	movs	r3, #10
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0x98>)
 80017a0:	f7ff f9fc 	bl	8000b9c <SCH_Add_Task>
  SCH_Add_Task(&fsm_setting, 0, 10);
 80017a4:	230a      	movs	r3, #10
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <main+0x9c>)
 80017b2:	f7ff f9f3 	bl	8000b9c <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		SCH_Dispatch_Tasks();
 80017b6:	f7ff f9a1 	bl	8000afc <SCH_Dispatch_Tasks>
 80017ba:	e7fc      	b.n	80017b6 <main+0x82>
 80017bc:	20000114 	.word	0x20000114
 80017c0:	08001295 	.word	0x08001295
 80017c4:	08001a2d 	.word	0x08001a2d
 80017c8:	080019cd 	.word	0x080019cd
 80017cc:	08000d6d 	.word	0x08000d6d
 80017d0:	08001239 	.word	0x08001239

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 ff2c 	bl	8003640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fe:	2310      	movs	r3, #16
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	4618      	mov	r0, r3
 800180c:	f000 ff26 	bl	800265c <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001816:	f000 f8d3 	bl	80019c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f001 f992 	bl	8002b5c <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800183e:	f000 f8bf 	bl	80019c0 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3740      	adds	r7, #64	; 0x40
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_TIM2_Init+0x94>)
 800186a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_TIM2_Init+0x94>)
 8001872:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_TIM2_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_TIM2_Init+0x94>)
 8001880:	2209      	movs	r2, #9
 8001882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_TIM2_Init+0x94>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_TIM2_Init+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001890:	4813      	ldr	r0, [pc, #76]	; (80018e0 <MX_TIM2_Init+0x94>)
 8001892:	f001 fabf 	bl	8002e14 <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800189c:	f000 f890 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <MX_TIM2_Init+0x94>)
 80018ae:	f001 fc3d 	bl	800312c <HAL_TIM_ConfigClockSource>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018b8:	f000 f882 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c4:	463b      	mov	r3, r7
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_TIM2_Init+0x94>)
 80018ca:	f001 fe15 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018d4:	f000 f874 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000114 	.word	0x20000114

080018e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <MX_GPIO_Init+0xbc>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <MX_GPIO_Init+0xbc>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <MX_GPIO_Init+0xbc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <MX_GPIO_Init+0xbc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <MX_GPIO_Init+0xbc>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <MX_GPIO_Init+0xbc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin|LED_YELLOW_1_Pin
 8001928:	2201      	movs	r2, #1
 800192a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 800192e:	481d      	ldr	r0, [pc, #116]	; (80019a4 <MX_GPIO_Init+0xc0>)
 8001930:	f000 fe63 	bl	80025fa <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin|LED_RED_3_Pin
                          |LED_GREEN_3_Pin|LED_YELLOW_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_YELLOW_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_7_SEG_Pin|B_7_SEG_Pin|C_7_SEG_Pin|ANOT_COMMON_4_Pin
 8001934:	2201      	movs	r2, #1
 8001936:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800193a:	481b      	ldr	r0, [pc, #108]	; (80019a8 <MX_GPIO_Init+0xc4>)
 800193c:	f000 fe5d 	bl	80025fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_1_Pin LED_GREEN_1_Pin LED_RED_Pin LED_YELLOW_1_Pin
                           LED_RED_2_Pin LED_GREEN_2_Pin LED_YELLOW_2_Pin LED_RED_3_Pin
                           LED_GREEN_3_Pin LED_YELLOW_3_Pin LED_RED_4_Pin LED_GREEN_4_Pin
                           LED_YELLOW_4_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin|LED_YELLOW_1_Pin
 8001940:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001944:	60bb      	str	r3, [r7, #8]
                          |LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin|LED_RED_3_Pin
                          |LED_GREEN_3_Pin|LED_YELLOW_3_Pin|LED_RED_4_Pin|LED_GREEN_4_Pin
                          |LED_YELLOW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2302      	movs	r3, #2
 8001950:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	4619      	mov	r1, r3
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <MX_GPIO_Init+0xc0>)
 800195a:	f000 fcbd 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_7_SEG_Pin B_7_SEG_Pin C_7_SEG_Pin ANOT_COMMON_4_Pin
                           D_7_SEG_Pin E_7_SEG_Pin F_7_SEG_Pin G_7_SEG_Pin
                           ANOT_COMMON_1_Pin ANOT_COMMON_2_Pin ANOT_COMMON_3_Pin */
  GPIO_InitStruct.Pin = A_7_SEG_Pin|B_7_SEG_Pin|C_7_SEG_Pin|ANOT_COMMON_4_Pin
 800195e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001962:	60bb      	str	r3, [r7, #8]
                          |D_7_SEG_Pin|E_7_SEG_Pin|F_7_SEG_Pin|G_7_SEG_Pin
                          |ANOT_COMMON_1_Pin|ANOT_COMMON_2_Pin|ANOT_COMMON_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2302      	movs	r3, #2
 800196e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4619      	mov	r1, r3
 8001976:	480c      	ldr	r0, [pc, #48]	; (80019a8 <MX_GPIO_Init+0xc4>)
 8001978:	f000 fcae 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800197c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_GPIO_Init+0xc4>)
 8001992:	f000 fca1 	bl	80022d8 <HAL_GPIO_Init>

}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00

080019ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80019b4:	f7fe fe4e 	bl	8000654 <SCH_Update>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <timerRun>:

bool OneSecondPass = 0;


void timerRun()
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	counterOneSecond--;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <timerRun+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <timerRun+0x2c>)
 80019d8:	6013      	str	r3, [r2, #0]
	if(counterOneSecond <= 0)
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <timerRun+0x2c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dc05      	bgt.n	80019ee <timerRun+0x22>
	{
		OneSecondPass = 1;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <timerRun+0x30>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
		counterOneSecond = 1000/TICK;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <timerRun+0x2c>)
 80019ea:	2264      	movs	r2, #100	; 0x64
 80019ec:	601a      	str	r2, [r3, #0]
	}
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000004 	.word	0x20000004
 80019fc:	200000c4 	.word	0x200000c4

08001a00 <IsOneSecondPassed>:

bool IsOneSecondPassed()
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	return OneSecondPass;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <IsOneSecondPassed+0x10>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	200000c4 	.word	0x200000c4

08001a14 <clearOneSecondFlag>:

void clearOneSecondFlag()
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
	OneSecondPass = 0;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <clearOneSecondFlag+0x14>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	200000c4 	.word	0x200000c4

08001a2c <ScanLed7Seg>:

void ScanLed7Seg()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	if(counterOneSecond%(TimeScanLed7Seg/TICK) == 0)
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <ScanLed7Seg+0x48>)
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <ScanLed7Seg+0x4c>)
 8001a36:	fb83 2301 	smull	r2, r3, r3, r1
 8001a3a:	10da      	asrs	r2, r3, #3
 8001a3c:	17cb      	asrs	r3, r1, #31
 8001a3e:	1ad2      	subs	r2, r2, r3
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009a      	lsls	r2, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	1aca      	subs	r2, r1, r3
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d107      	bne.n	8001a60 <ScanLed7Seg+0x34>
		update7SEG(indexScanLed7Seg++);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <ScanLed7Seg+0x50>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4909      	ldr	r1, [pc, #36]	; (8001a7c <ScanLed7Seg+0x50>)
 8001a58:	600a      	str	r2, [r1, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fc48 	bl	80012f0 <update7SEG>

	if(indexScanLed7Seg >= MAX_LED)
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <ScanLed7Seg+0x50>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	dd02      	ble.n	8001a6e <ScanLed7Seg+0x42>
		indexScanLed7Seg = 0;
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <ScanLed7Seg+0x50>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000004 	.word	0x20000004
 8001a78:	51eb851f 	.word	0x51eb851f
 8001a7c:	200000c0 	.word	0x200000c0

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_MspInit+0x5c>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_MspInit+0x5c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_MspInit+0x5c>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_MspInit+0x5c>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_MspInit+0x5c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_MspInit+0x5c>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_MspInit+0x60>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_MspInit+0x60>)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af4:	d113      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_TIM_Base_MspInit+0x44>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_TIM_Base_MspInit+0x44>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_TIM_Base_MspInit+0x44>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	201c      	movs	r0, #28
 8001b14:	f000 fba9 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b18:	201c      	movs	r0, #28
 8001b1a:	f000 fbc2 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 fa87 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM2_IRQHandler+0x10>)
 8001b82:	f001 f9e3 	bl	8002f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000114 	.word	0x20000114

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f001 fd04 	bl	80035cc <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <_sbrk+0x64>)
 8001be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20002800 	.word	0x20002800
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	200000c8 	.word	0x200000c8
 8001bf8:	20000170 	.word	0x20000170

08001bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <update7SegBufferForOdd>:
int TimeGreenDecrease = 0;

bool Onepass = 0; //one pass indicate that node 0 have been pressed (switch mode on)

void update7SegBufferForOdd(int interval) //odd is index 1 & 3
{//we will minus for 1 to get index of array
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	Set7SegBufferAtIndex(1-1, interval/10); //max 99
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <update7SegBufferForOdd+0x44>)
 8001c14:	fb82 1203 	smull	r1, r2, r2, r3
 8001c18:	1092      	asrs	r2, r2, #2
 8001c1a:	17db      	asrs	r3, r3, #31
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fb4f 	bl	80012c4 <Set7SegBufferAtIndex>
	Set7SegBufferAtIndex(3-1, interval%10);
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <update7SegBufferForOdd+0x44>)
 8001c2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c2e:	1099      	asrs	r1, r3, #2
 8001c30:	17d3      	asrs	r3, r2, #31
 8001c32:	1ac9      	subs	r1, r1, r3
 8001c34:	460b      	mov	r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	1ad1      	subs	r1, r2, r3
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7ff fb40 	bl	80012c4 <Set7SegBufferAtIndex>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	66666667 	.word	0x66666667

08001c50 <update7SegBufferForEven>:

void update7SegBufferForEven(int interval) //even is index 2 & 4
{//we will minus for 1 to get index of array
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	Set7SegBufferAtIndex(2-1, interval/10); //max 99
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <update7SegBufferForEven+0x44>)
 8001c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c60:	1092      	asrs	r2, r2, #2
 8001c62:	17db      	asrs	r3, r3, #31
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7ff fb2b 	bl	80012c4 <Set7SegBufferAtIndex>
	Set7SegBufferAtIndex(4-1, interval%10);
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <update7SegBufferForEven+0x44>)
 8001c72:	fb83 1302 	smull	r1, r3, r3, r2
 8001c76:	1099      	asrs	r1, r3, #2
 8001c78:	17d3      	asrs	r3, r2, #31
 8001c7a:	1ac9      	subs	r1, r1, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	1ad1      	subs	r1, r2, r3
 8001c86:	2003      	movs	r0, #3
 8001c88:	f7ff fb1c 	bl	80012c4 <Set7SegBufferAtIndex>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	66666667 	.word	0x66666667

08001c98 <UpdateTimeDecrease>:

void UpdateTimeDecrease()
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	TimeRedDecrease = TimeForRed;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <UpdateTimeDecrease+0x24>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <UpdateTimeDecrease+0x28>)
 8001ca2:	6013      	str	r3, [r2, #0]
	TimeAmberDecrease = TimeForAmber;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <UpdateTimeDecrease+0x2c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <UpdateTimeDecrease+0x30>)
 8001caa:	6013      	str	r3, [r2, #0]
	TimeGreenDecrease = TimeForGreen;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <UpdateTimeDecrease+0x34>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <UpdateTimeDecrease+0x38>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	200000cc 	.word	0x200000cc
 8001cc0:	200000dc 	.word	0x200000dc
 8001cc4:	200000d0 	.word	0x200000d0
 8001cc8:	200000e0 	.word	0x200000e0
 8001ccc:	200000d4 	.word	0x200000d4
 8001cd0:	200000e4 	.word	0x200000e4

08001cd4 <DecreaseTimeForOne>:

void DecreaseTimeForOne()
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
	TimeRedDecrease --;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <DecreaseTimeForOne+0x34>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <DecreaseTimeForOne+0x34>)
 8001ce0:	6013      	str	r3, [r2, #0]
	if(TimeGreenDecrease < 0)
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <DecreaseTimeForOne+0x38>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da05      	bge.n	8001cf6 <DecreaseTimeForOne+0x22>
		TimeAmberDecrease --;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <DecreaseTimeForOne+0x3c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <DecreaseTimeForOne+0x3c>)
 8001cf2:	6013      	str	r3, [r2, #0]
	else
		TimeGreenDecrease --;
}
 8001cf4:	e004      	b.n	8001d00 <DecreaseTimeForOne+0x2c>
		TimeGreenDecrease --;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <DecreaseTimeForOne+0x38>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <DecreaseTimeForOne+0x38>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	200000dc 	.word	0x200000dc
 8001d0c:	200000e4 	.word	0x200000e4
 8001d10:	200000e0 	.word	0x200000e0

08001d14 <turnOnLedRedForEven>:

void turnOnLedRedForEven()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 0); //0 is on
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <turnOnLedRedForEven+0x20>)
 8001d1e:	f000 fc6c 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <turnOnLedRedForEven+0x20>)
 8001d2a:	f000 fc66 	bl	80025fa <HAL_GPIO_WritePin>
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40010800 	.word	0x40010800

08001d38 <turnOnLedRedForOdd>:

void turnOnLedRedForOdd()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 0); //0 is on
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2108      	movs	r1, #8
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <turnOnLedRedForOdd+0x20>)
 8001d42:	f000 fc5a 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <turnOnLedRedForOdd+0x20>)
 8001d4e:	f000 fc54 	bl	80025fa <HAL_GPIO_WritePin>

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40010800 	.word	0x40010800

08001d5c <turnOnLedAmberForEven>:

void turnOnLedAmberForEven()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 0); //0 is on
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <turnOnLedAmberForEven+0x20>)
 8001d68:	f000 fc47 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_4_GPIO_Port, LED_YELLOW_4_Pin, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d72:	4802      	ldr	r0, [pc, #8]	; (8001d7c <turnOnLedAmberForEven+0x20>)
 8001d74:	f000 fc41 	bl	80025fa <HAL_GPIO_WritePin>
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010800 	.word	0x40010800

08001d80 <turnOnLedAmberForOdd>:

void turnOnLedAmberForOdd()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 0); //0 is on
 8001d84:	2200      	movs	r2, #0
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <turnOnLedAmberForOdd+0x20>)
 8001d8a:	f000 fc36 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_3_GPIO_Port, LED_YELLOW_3_Pin, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <turnOnLedAmberForOdd+0x20>)
 8001d96:	f000 fc30 	bl	80025fa <HAL_GPIO_WritePin>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40010800 	.word	0x40010800

08001da4 <turnOnLedGreenForEven>:

void turnOnLedGreenForEven()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 0); //0 is on
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <turnOnLedGreenForEven+0x20>)
 8001db0:	f000 fc23 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <turnOnLedGreenForEven+0x20>)
 8001dbc:	f000 fc1d 	bl	80025fa <HAL_GPIO_WritePin>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40010800 	.word	0x40010800

08001dc8 <turnOnLedGreenForOdd>:

void turnOnLedGreenForOdd()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 0); //0 is on
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2110      	movs	r1, #16
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <turnOnLedGreenForOdd+0x20>)
 8001dd2:	f000 fc12 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <turnOnLedGreenForOdd+0x20>)
 8001dde:	f000 fc0c 	bl	80025fa <HAL_GPIO_WritePin>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40010800 	.word	0x40010800

08001dec <clearAllLed>:

void clearAllLed()
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, 1); //0 is on
 8001df0:	2201      	movs	r2, #1
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	4821      	ldr	r0, [pc, #132]	; (8001e7c <clearAllLed+0x90>)
 8001df6:	f000 fc00 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_4_GPIO_Port, LED_RED_4_Pin, 1);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e00:	481e      	ldr	r0, [pc, #120]	; (8001e7c <clearAllLed+0x90>)
 8001e02:	f000 fbfa 	bl	80025fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, 1); //0 is on
 8001e06:	2201      	movs	r2, #1
 8001e08:	2108      	movs	r1, #8
 8001e0a:	481c      	ldr	r0, [pc, #112]	; (8001e7c <clearAllLed+0x90>)
 8001e0c:	f000 fbf5 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_3_GPIO_Port, LED_RED_3_Pin, 1);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e16:	4819      	ldr	r0, [pc, #100]	; (8001e7c <clearAllLed+0x90>)
 8001e18:	f000 fbef 	bl	80025fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, 1); //0 is on
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e22:	4816      	ldr	r0, [pc, #88]	; (8001e7c <clearAllLed+0x90>)
 8001e24:	f000 fbe9 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_4_GPIO_Port, LED_YELLOW_4_Pin, 1);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2e:	4813      	ldr	r0, [pc, #76]	; (8001e7c <clearAllLed+0x90>)
 8001e30:	f000 fbe3 	bl	80025fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, 1); //0 is on
 8001e34:	2201      	movs	r2, #1
 8001e36:	2140      	movs	r1, #64	; 0x40
 8001e38:	4810      	ldr	r0, [pc, #64]	; (8001e7c <clearAllLed+0x90>)
 8001e3a:	f000 fbde 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_3_GPIO_Port, LED_YELLOW_3_Pin, 1);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <clearAllLed+0x90>)
 8001e46:	f000 fbd8 	bl	80025fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, 1); //0 is on
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <clearAllLed+0x90>)
 8001e52:	f000 fbd2 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_4_GPIO_Port, LED_GREEN_4_Pin, 1);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <clearAllLed+0x90>)
 8001e5e:	f000 fbcc 	bl	80025fa <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, 1); //0 is on
 8001e62:	2201      	movs	r2, #1
 8001e64:	2110      	movs	r1, #16
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <clearAllLed+0x90>)
 8001e68:	f000 fbc7 	bl	80025fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_3_GPIO_Port, LED_GREEN_3_Pin, 1);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e72:	4802      	ldr	r0, [pc, #8]	; (8001e7c <clearAllLed+0x90>)
 8001e74:	f000 fbc1 	bl	80025fa <HAL_GPIO_WritePin>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40010800 	.word	0x40010800

08001e80 <traffic_light>:

void traffic_light()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	switch (OddOrEven)
 8001e84:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <traffic_light+0x114>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d13e      	bne.n	8001f0a <traffic_light+0x8a>
	{
		case 1: //LedRed for odd
				update7SegBufferForOdd(TimeRedDecrease);
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <traffic_light+0x118>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff feb9 	bl	8001c08 <update7SegBufferForOdd>

				if(Onepass)
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <traffic_light+0x11c>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <traffic_light+0x30>
				{
					clearAllLed();
 8001e9e:	f7ff ffa5 	bl	8001dec <clearAllLed>
					turnOnLedRedForOdd();
 8001ea2:	f7ff ff49 	bl	8001d38 <turnOnLedRedForOdd>
					turnOnLedGreenForEven();
 8001ea6:	f7ff ff7d 	bl	8001da4 <turnOnLedGreenForEven>
					Onepass = 0;
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <traffic_light+0x11c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
				}

				if(TimeGreenDecrease < 0) //switch to Led yellow
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <traffic_light+0x120>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da0b      	bge.n	8001ed0 <traffic_light+0x50>
				{
					update7SegBufferForEven(TimeAmberDecrease);
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <traffic_light+0x124>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fec7 	bl	8001c50 <update7SegBufferForEven>
					clearAllLed();
 8001ec2:	f7ff ff93 	bl	8001dec <clearAllLed>
					turnOnLedAmberForEven();
 8001ec6:	f7ff ff49 	bl	8001d5c <turnOnLedAmberForEven>
					turnOnLedRedForOdd();
 8001eca:	f7ff ff35 	bl	8001d38 <turnOnLedRedForOdd>
 8001ece:	e004      	b.n	8001eda <traffic_light+0x5a>
				}

				else
					update7SegBufferForEven(TimeGreenDecrease);
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <traffic_light+0x120>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff febb 	bl	8001c50 <update7SegBufferForEven>

				if(OneSecondPass) //one second flag on
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <traffic_light+0x128>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <traffic_light+0x6a>
				{
					DecreaseTimeForOne();
 8001ee2:	f7ff fef7 	bl	8001cd4 <DecreaseTimeForOne>
					clearOneSecondFlag(); //clear one second flag
 8001ee6:	f7ff fd95 	bl	8001a14 <clearOneSecondFlag>
				}

				if(TimeRedDecrease < 0)
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <traffic_light+0x118>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da4a      	bge.n	8001f88 <traffic_light+0x108>
				{
					UpdateTimeDecrease();
 8001ef2:	f7ff fed1 	bl	8001c98 <UpdateTimeDecrease>

					clearAllLed();
 8001ef6:	f7ff ff79 	bl	8001dec <clearAllLed>
					turnOnLedRedForEven();
 8001efa:	f7ff ff0b 	bl	8001d14 <turnOnLedRedForEven>
					turnOnLedGreenForOdd();
 8001efe:	f7ff ff63 	bl	8001dc8 <turnOnLedGreenForOdd>

					OddOrEven = 0; //switch to LedRed state for even
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <traffic_light+0x114>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
				}

		break;
 8001f08:	e03e      	b.n	8001f88 <traffic_light+0x108>

		default: //Led Red for even
				update7SegBufferForEven(TimeRedDecrease);
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <traffic_light+0x118>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fe9e 	bl	8001c50 <update7SegBufferForEven>

				if(Onepass)
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <traffic_light+0x11c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <traffic_light+0xae>
				{
					clearAllLed();
 8001f1c:	f7ff ff66 	bl	8001dec <clearAllLed>
					turnOnLedRedForEven();
 8001f20:	f7ff fef8 	bl	8001d14 <turnOnLedRedForEven>
					turnOnLedGreenForOdd();
 8001f24:	f7ff ff50 	bl	8001dc8 <turnOnLedGreenForOdd>
					Onepass = 0;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <traffic_light+0x11c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
				}

				if(TimeGreenDecrease < 0) //switch to Led yellow
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <traffic_light+0x120>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	da0b      	bge.n	8001f4e <traffic_light+0xce>
				{
					update7SegBufferForOdd(TimeAmberDecrease);
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <traffic_light+0x124>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fe64 	bl	8001c08 <update7SegBufferForOdd>
					clearAllLed();
 8001f40:	f7ff ff54 	bl	8001dec <clearAllLed>
					turnOnLedAmberForOdd();
 8001f44:	f7ff ff1c 	bl	8001d80 <turnOnLedAmberForOdd>
					turnOnLedRedForEven();
 8001f48:	f7ff fee4 	bl	8001d14 <turnOnLedRedForEven>
 8001f4c:	e004      	b.n	8001f58 <traffic_light+0xd8>
				}

				else
					update7SegBufferForOdd(TimeGreenDecrease);
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <traffic_light+0x120>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fe58 	bl	8001c08 <update7SegBufferForOdd>

				if(OneSecondPass) //one second flag on
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <traffic_light+0x128>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <traffic_light+0xe8>
				{
					DecreaseTimeForOne();
 8001f60:	f7ff feb8 	bl	8001cd4 <DecreaseTimeForOne>
					clearOneSecondFlag(); //clear one second flag
 8001f64:	f7ff fd56 	bl	8001a14 <clearOneSecondFlag>
				}

				if(TimeRedDecrease < 0)
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <traffic_light+0x118>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da0d      	bge.n	8001f8c <traffic_light+0x10c>
				{
					UpdateTimeDecrease();
 8001f70:	f7ff fe92 	bl	8001c98 <UpdateTimeDecrease>

					clearAllLed();
 8001f74:	f7ff ff3a 	bl	8001dec <clearAllLed>
					turnOnLedRedForOdd();
 8001f78:	f7ff fede 	bl	8001d38 <turnOnLedRedForOdd>
					turnOnLedGreenForEven();
 8001f7c:	f7ff ff12 	bl	8001da4 <turnOnLedGreenForEven>

					OddOrEven = 1; //switch to LedRed state for odd
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <traffic_light+0x114>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
				}
		break;
 8001f86:	e001      	b.n	8001f8c <traffic_light+0x10c>
		break;
 8001f88:	bf00      	nop
 8001f8a:	e000      	b.n	8001f8e <traffic_light+0x10e>
		break;
 8001f8c:	bf00      	nop
	}
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200000d8 	.word	0x200000d8
 8001f98:	200000dc 	.word	0x200000dc
 8001f9c:	200000e8 	.word	0x200000e8
 8001fa0:	200000e4 	.word	0x200000e4
 8001fa4:	200000e0 	.word	0x200000e0
 8001fa8:	200000c4 	.word	0x200000c4

08001fac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fac:	f7ff fe26 	bl	8001bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fb2:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fc8:	4c09      	ldr	r4, [pc, #36]	; (8001ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f001 faff 	bl	80035d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fda:	f7ff fbab 	bl	8001734 <main>
  bx lr
 8001fde:	4770      	bx	lr
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fe8:	08003824 	.word	0x08003824
  ldr r2, =_sbss
 8001fec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ff0:	20000170 	.word	0x20000170

08001ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC1_2_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_Init+0x28>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_Init+0x28>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f923 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	200f      	movs	r0, #15
 8002010:	f000 f808 	bl	8002024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff fd34 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f93b 	bl	80022be <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f000 f903 	bl	800226a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000008 	.word	0x20000008
 800207c:	20000010 	.word	0x20000010
 8002080:	2000000c 	.word	0x2000000c

08002084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_IncTick+0x1c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_IncTick+0x20>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <HAL_IncTick+0x20>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000010 	.word	0x20000010
 80020a4:	2000015c 	.word	0x2000015c

080020a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_GetTick+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	2000015c 	.word	0x2000015c

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4906      	ldr	r1, [pc, #24]	; (8002154 <__NVIC_EnableIRQ+0x34>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff90 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff2d 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff42 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff90 	bl	80021ac <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5f 	bl	8002158 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff35 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa2 	bl	8002210 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b08b      	sub	sp, #44	; 0x2c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e148      	b.n	800257e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022ec:	2201      	movs	r2, #1
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8137 	bne.w	8002578 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4aa3      	ldr	r2, [pc, #652]	; (800259c <HAL_GPIO_Init+0x2c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d05e      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002314:	4aa1      	ldr	r2, [pc, #644]	; (800259c <HAL_GPIO_Init+0x2c4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d875      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800231a:	4aa1      	ldr	r2, [pc, #644]	; (80025a0 <HAL_GPIO_Init+0x2c8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d058      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002320:	4a9f      	ldr	r2, [pc, #636]	; (80025a0 <HAL_GPIO_Init+0x2c8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d86f      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002326:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <HAL_GPIO_Init+0x2cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d052      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 800232c:	4a9d      	ldr	r2, [pc, #628]	; (80025a4 <HAL_GPIO_Init+0x2cc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d869      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002332:	4a9d      	ldr	r2, [pc, #628]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04c      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002338:	4a9b      	ldr	r2, [pc, #620]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d863      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800233e:	4a9b      	ldr	r2, [pc, #620]	; (80025ac <HAL_GPIO_Init+0x2d4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d046      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002344:	4a99      	ldr	r2, [pc, #612]	; (80025ac <HAL_GPIO_Init+0x2d4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d85d      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800234a:	2b12      	cmp	r3, #18
 800234c:	d82a      	bhi.n	80023a4 <HAL_GPIO_Init+0xcc>
 800234e:	2b12      	cmp	r3, #18
 8002350:	d859      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_GPIO_Init+0x80>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	080023d3 	.word	0x080023d3
 800235c:	080023ad 	.word	0x080023ad
 8002360:	080023bf 	.word	0x080023bf
 8002364:	08002401 	.word	0x08002401
 8002368:	08002407 	.word	0x08002407
 800236c:	08002407 	.word	0x08002407
 8002370:	08002407 	.word	0x08002407
 8002374:	08002407 	.word	0x08002407
 8002378:	08002407 	.word	0x08002407
 800237c:	08002407 	.word	0x08002407
 8002380:	08002407 	.word	0x08002407
 8002384:	08002407 	.word	0x08002407
 8002388:	08002407 	.word	0x08002407
 800238c:	08002407 	.word	0x08002407
 8002390:	08002407 	.word	0x08002407
 8002394:	08002407 	.word	0x08002407
 8002398:	08002407 	.word	0x08002407
 800239c:	080023b5 	.word	0x080023b5
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	4a82      	ldr	r2, [pc, #520]	; (80025b0 <HAL_GPIO_Init+0x2d8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023aa:	e02c      	b.n	8002406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e029      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	3304      	adds	r3, #4
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e024      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	3308      	adds	r3, #8
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e01f      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	330c      	adds	r3, #12
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e01a      	b.n	8002408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023da:	2304      	movs	r3, #4
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e013      	b.n	8002408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e8:	2308      	movs	r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	611a      	str	r2, [r3, #16]
          break;
 80023f2:	e009      	b.n	8002408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	615a      	str	r2, [r3, #20]
          break;
 80023fe:	e003      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x130>
          break;
 8002406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2bff      	cmp	r3, #255	; 0xff
 800240c:	d801      	bhi.n	8002412 <HAL_GPIO_Init+0x13a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_Init+0x13e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d802      	bhi.n	8002424 <HAL_GPIO_Init+0x14c>
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x152>
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3b08      	subs	r3, #8
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	210f      	movs	r1, #15
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8090 	beq.w	8002578 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002458:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <HAL_GPIO_Init+0x2dc>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <HAL_GPIO_Init+0x2dc>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_GPIO_Init+0x2dc>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002470:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_GPIO_Init+0x2e0>)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a49      	ldr	r2, [pc, #292]	; (80025bc <HAL_GPIO_Init+0x2e4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00d      	beq.n	80024b8 <HAL_GPIO_Init+0x1e0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_GPIO_Init+0x2e8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <HAL_GPIO_Init+0x1dc>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <HAL_GPIO_Init+0x2ec>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_GPIO_Init+0x1d8>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_Init+0x1e2>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_Init+0x1e2>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_Init+0x1e2>
 80024b8:	2300      	movs	r3, #0
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ca:	493b      	ldr	r1, [pc, #236]	; (80025b8 <HAL_GPIO_Init+0x2e0>)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e4:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4937      	ldr	r1, [pc, #220]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4933      	ldr	r1, [pc, #204]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800250c:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	492d      	ldr	r1, [pc, #180]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	4929      	ldr	r1, [pc, #164]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 8002524:	4013      	ands	r3, r2
 8002526:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4923      	ldr	r1, [pc, #140]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	491f      	ldr	r1, [pc, #124]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 800254c:	4013      	ands	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4919      	ldr	r1, [pc, #100]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4915      	ldr	r1, [pc, #84]	; (80025c8 <HAL_GPIO_Init+0x2f0>)
 8002574:	4013      	ands	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	3301      	adds	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f aeaf 	bne.w	80022ec <HAL_GPIO_Init+0x14>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	372c      	adds	r7, #44	; 0x2c
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	10320000 	.word	0x10320000
 80025a0:	10310000 	.word	0x10310000
 80025a4:	10220000 	.word	0x10220000
 80025a8:	10210000 	.word	0x10210000
 80025ac:	10120000 	.word	0x10120000
 80025b0:	10110000 	.word	0x10110000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40010c00 	.word	0x40010c00
 80025c4:	40011000 	.word	0x40011000
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e001      	b.n	80025ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	807b      	strh	r3, [r7, #2]
 8002606:	4613      	mov	r3, r2
 8002608:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800260a:	787b      	ldrb	r3, [r7, #1]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002610:	887a      	ldrh	r2, [r7, #2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002616:	e003      	b.n	8002620 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	041a      	lsls	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263c:	887a      	ldrh	r2, [r7, #2]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	041a      	lsls	r2, r3, #16
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43d9      	mvns	r1, r3
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	400b      	ands	r3, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e26c      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8087 	beq.w	800278a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b04      	cmp	r3, #4
 8002686:	d00c      	beq.n	80026a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002688:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d112      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d10b      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06c      	beq.n	8002788 <HAL_RCC_OscConfig+0x12c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d168      	bne.n	8002788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e246      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x76>
 80026c4:	4b80      	ldr	r3, [pc, #512]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a7f      	ldr	r2, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0xbc>
 80026fe:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a71      	ldr	r2, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6e      	ldr	r2, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xd4>
 8002718:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a67      	ldr	r2, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fcb6 	bl	80020a8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fcb2 	bl	80020a8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1fa      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xe4>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff fca2 	bl	80020a8 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fc9e 	bl	80020a8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1e6      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x10c>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1ba      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4939      	ldr	r1, [pc, #228]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff fc57 	bl	80020a8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff fc53 	bl	80020a8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e19b      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x270>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fc36 	bl	80020a8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff fc32 	bl	80020a8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e17a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03a      	beq.n	80028e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff fc16 	bl	80020a8 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff fc12 	bl	80020a8 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e15a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x26c>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 fa9a 	bl	8002dd8 <RCC_Delay>
 80028a4:	e01c      	b.n	80028e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_OscConfig+0x274>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff fbfc 	bl	80020a8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff fbf8 	bl	80020a8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d908      	bls.n	80028d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e140      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	42420000 	.word	0x42420000
 80028d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b9e      	ldr	r3, [pc, #632]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e9      	bne.n	80028b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a6 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b97      	ldr	r3, [pc, #604]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b94      	ldr	r3, [pc, #592]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a93      	ldr	r2, [pc, #588]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b91      	ldr	r3, [pc, #580]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b8e      	ldr	r3, [pc, #568]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b8b      	ldr	r3, [pc, #556]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a8a      	ldr	r2, [pc, #552]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff fbb9 	bl	80020a8 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff fbb5 	bl	80020a8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0fd      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b81      	ldr	r3, [pc, #516]	; (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x312>
 8002960:	4b7b      	ldr	r3, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a7a      	ldr	r2, [pc, #488]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x334>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a72      	ldr	r2, [pc, #456]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x356>
 8002998:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	4a6c      	ldr	r2, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6213      	str	r3, [r2, #32]
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x36e>
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a66      	ldr	r2, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6213      	str	r3, [r2, #32]
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4a63      	ldr	r2, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7ff fb69 	bl	80020a8 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff fb65 	bl	80020a8 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0ab      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x37e>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7ff fb53 	bl	80020a8 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7ff fb4f 	bl	80020a8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e095      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8081 	beq.w	8002b46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d061      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d146      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff fb23 	bl	80020a8 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7ff fb1f 	bl	80020a8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e067      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8e:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	492d      	ldr	r1, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a19      	ldr	r1, [r3, #32]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	4927      	ldr	r1, [pc, #156]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7ff faf3 	bl	80020a8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7ff faef 	bl	80020a8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e037      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x46a>
 8002ae4:	e02f      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_RCC_OscConfig+0x4fc>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fadc 	bl	80020a8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff fad8 	bl	80020a8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e020      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x498>
 8002b12:	e018      	b.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e013      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42420060 	.word	0x42420060

08002b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d0      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4965      	ldr	r1, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d040      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e073      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7ff fa2c 	bl	80020a8 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7ff fa28 	bl	80020a8 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e053      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d210      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 0207 	bic.w	r2, r3, #7
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1cc>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1d0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f98a 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	080037f0 	.word	0x080037f0
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	2000000c 	.word	0x2000000c

08002d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x30>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5e:	e027      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d62:	613b      	str	r3, [r7, #16]
      break;
 8002d64:	e027      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d92:	fb02 f203 	mul.w	r2, r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e004      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	613b      	str	r3, [r7, #16]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	613b      	str	r3, [r7, #16]
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	693b      	ldr	r3, [r7, #16]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	007a1200 	.word	0x007a1200
 8002dcc:	08003800 	.word	0x08003800
 8002dd0:	08003810 	.word	0x08003810
 8002dd4:	003d0900 	.word	0x003d0900

08002dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCC_Delay+0x34>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <RCC_Delay+0x38>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002df4:	bf00      	nop
  }
  while (Delay --);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e5a      	subs	r2, r3, #1
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f9      	bne.n	8002df4 <RCC_Delay+0x1c>
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fe52 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fa56 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d001      	beq.n	8002ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e035      	b.n	8002f38 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_TIM_Base_Start_IT+0x90>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_TIM_Base_Start_IT+0x4e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIM_Base_Start_IT+0x4e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_TIM_Base_Start_IT+0x94>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d111      	bne.n	8002f26 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b06      	cmp	r3, #6
 8002f12:	d010      	beq.n	8002f36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	e007      	b.n	8002f36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400

08002f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0202 	mvn.w	r2, #2
 8002f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f998 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f98b 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f99a 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0204 	mvn.w	r2, #4
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f972 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f965 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f974 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0208 	mvn.w	r2, #8
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2204      	movs	r2, #4
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f94c 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f93f 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f94e 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d020      	beq.n	8003094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0210 	mvn.w	r2, #16
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2208      	movs	r2, #8
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f926 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f919 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f928 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0201 	mvn.w	r2, #1
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fc7a 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa6f 	bl	80035ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8f8 	bl	80032f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0220 	mvn.w	r2, #32
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa42 	bl	80035a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0x1c>
 8003144:	2302      	movs	r3, #2
 8003146:	e0b4      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x186>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003180:	d03e      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0xd4>
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003186:	f200 8087 	bhi.w	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	f000 8086 	beq.w	800329e <HAL_TIM_ConfigClockSource+0x172>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d87f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d01a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xa6>
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d87b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d050      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x11a>
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d877      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d03c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0xfa>
 80031ac:	2b50      	cmp	r3, #80	; 0x50
 80031ae:	d873      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d058      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x13a>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d86f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d064      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d86b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d060      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d867      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15a>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d05a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	e062      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f000 f96a 	bl	80034ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	609a      	str	r2, [r3, #8]
      break;
 80031fe:	e04f      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f000 f953 	bl	80034ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003222:	609a      	str	r2, [r3, #8]
      break;
 8003224:	e03c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	461a      	mov	r2, r3
 8003234:	f000 f8ca 	bl	80033cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2150      	movs	r1, #80	; 0x50
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f921 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003244:	e02c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	461a      	mov	r2, r3
 8003254:	f000 f8e8 	bl	8003428 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2160      	movs	r1, #96	; 0x60
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f911 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003264:	e01c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	461a      	mov	r2, r3
 8003274:	f000 f8aa 	bl	80033cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2140      	movs	r1, #64	; 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f901 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003284:	e00c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f000 f8f8 	bl	8003486 <TIM_ITRx_SetConfig>
      break;
 8003296:	e003      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e000      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800329e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
	...

08003304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <TIM_Base_SetConfig+0xc0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d007      	beq.n	800332c <TIM_Base_SetConfig+0x28>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0x28>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <TIM_Base_SetConfig+0xc4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <TIM_Base_SetConfig+0xc0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <TIM_Base_SetConfig+0x52>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d003      	beq.n	8003356 <TIM_Base_SetConfig+0x52>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <TIM_Base_SetConfig+0xc4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d108      	bne.n	8003368 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <TIM_Base_SetConfig+0xc0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d103      	bne.n	800339c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f023 0201 	bic.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]
  }
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400

080033cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 030a 	bic.w	r3, r3, #10
 8003408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0210 	bic.w	r2, r3, #16
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	031b      	lsls	r3, r3, #12
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003464:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f043 0307 	orr.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	609a      	str	r2, [r3, #8]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	609a      	str	r2, [r3, #8]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e041      	b.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d004      	beq.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10c      	bne.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800356e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400

080035a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <__errno>:
 80035cc:	4b01      	ldr	r3, [pc, #4]	; (80035d4 <__errno+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000014 	.word	0x20000014

080035d8 <__libc_init_array>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	2600      	movs	r6, #0
 80035dc:	4d0c      	ldr	r5, [pc, #48]	; (8003610 <__libc_init_array+0x38>)
 80035de:	4c0d      	ldr	r4, [pc, #52]	; (8003614 <__libc_init_array+0x3c>)
 80035e0:	1b64      	subs	r4, r4, r5
 80035e2:	10a4      	asrs	r4, r4, #2
 80035e4:	42a6      	cmp	r6, r4
 80035e6:	d109      	bne.n	80035fc <__libc_init_array+0x24>
 80035e8:	f000 f8f6 	bl	80037d8 <_init>
 80035ec:	2600      	movs	r6, #0
 80035ee:	4d0a      	ldr	r5, [pc, #40]	; (8003618 <__libc_init_array+0x40>)
 80035f0:	4c0a      	ldr	r4, [pc, #40]	; (800361c <__libc_init_array+0x44>)
 80035f2:	1b64      	subs	r4, r4, r5
 80035f4:	10a4      	asrs	r4, r4, #2
 80035f6:	42a6      	cmp	r6, r4
 80035f8:	d105      	bne.n	8003606 <__libc_init_array+0x2e>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003600:	4798      	blx	r3
 8003602:	3601      	adds	r6, #1
 8003604:	e7ee      	b.n	80035e4 <__libc_init_array+0xc>
 8003606:	f855 3b04 	ldr.w	r3, [r5], #4
 800360a:	4798      	blx	r3
 800360c:	3601      	adds	r6, #1
 800360e:	e7f2      	b.n	80035f6 <__libc_init_array+0x1e>
 8003610:	0800381c 	.word	0x0800381c
 8003614:	0800381c 	.word	0x0800381c
 8003618:	0800381c 	.word	0x0800381c
 800361c:	08003820 	.word	0x08003820

08003620 <malloc>:
 8003620:	4b02      	ldr	r3, [pc, #8]	; (800362c <malloc+0xc>)
 8003622:	4601      	mov	r1, r0
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	f000 b85f 	b.w	80036e8 <_malloc_r>
 800362a:	bf00      	nop
 800362c:	20000014 	.word	0x20000014

08003630 <free>:
 8003630:	4b02      	ldr	r3, [pc, #8]	; (800363c <free+0xc>)
 8003632:	4601      	mov	r1, r0
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f000 b80b 	b.w	8003650 <_free_r>
 800363a:	bf00      	nop
 800363c:	20000014 	.word	0x20000014

08003640 <memset>:
 8003640:	4603      	mov	r3, r0
 8003642:	4402      	add	r2, r0
 8003644:	4293      	cmp	r3, r2
 8003646:	d100      	bne.n	800364a <memset+0xa>
 8003648:	4770      	bx	lr
 800364a:	f803 1b01 	strb.w	r1, [r3], #1
 800364e:	e7f9      	b.n	8003644 <memset+0x4>

08003650 <_free_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4605      	mov	r5, r0
 8003654:	2900      	cmp	r1, #0
 8003656:	d043      	beq.n	80036e0 <_free_r+0x90>
 8003658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800365c:	1f0c      	subs	r4, r1, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	bfb8      	it	lt
 8003662:	18e4      	addlt	r4, r4, r3
 8003664:	f000 f8aa 	bl	80037bc <__malloc_lock>
 8003668:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <_free_r+0x94>)
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	4610      	mov	r0, r2
 800366e:	b933      	cbnz	r3, 800367e <_free_r+0x2e>
 8003670:	6063      	str	r3, [r4, #4]
 8003672:	6014      	str	r4, [r2, #0]
 8003674:	4628      	mov	r0, r5
 8003676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800367a:	f000 b8a5 	b.w	80037c8 <__malloc_unlock>
 800367e:	42a3      	cmp	r3, r4
 8003680:	d90a      	bls.n	8003698 <_free_r+0x48>
 8003682:	6821      	ldr	r1, [r4, #0]
 8003684:	1862      	adds	r2, r4, r1
 8003686:	4293      	cmp	r3, r2
 8003688:	bf01      	itttt	eq
 800368a:	681a      	ldreq	r2, [r3, #0]
 800368c:	685b      	ldreq	r3, [r3, #4]
 800368e:	1852      	addeq	r2, r2, r1
 8003690:	6022      	streq	r2, [r4, #0]
 8003692:	6063      	str	r3, [r4, #4]
 8003694:	6004      	str	r4, [r0, #0]
 8003696:	e7ed      	b.n	8003674 <_free_r+0x24>
 8003698:	461a      	mov	r2, r3
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	b10b      	cbz	r3, 80036a2 <_free_r+0x52>
 800369e:	42a3      	cmp	r3, r4
 80036a0:	d9fa      	bls.n	8003698 <_free_r+0x48>
 80036a2:	6811      	ldr	r1, [r2, #0]
 80036a4:	1850      	adds	r0, r2, r1
 80036a6:	42a0      	cmp	r0, r4
 80036a8:	d10b      	bne.n	80036c2 <_free_r+0x72>
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	4401      	add	r1, r0
 80036ae:	1850      	adds	r0, r2, r1
 80036b0:	4283      	cmp	r3, r0
 80036b2:	6011      	str	r1, [r2, #0]
 80036b4:	d1de      	bne.n	8003674 <_free_r+0x24>
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4401      	add	r1, r0
 80036bc:	6011      	str	r1, [r2, #0]
 80036be:	6053      	str	r3, [r2, #4]
 80036c0:	e7d8      	b.n	8003674 <_free_r+0x24>
 80036c2:	d902      	bls.n	80036ca <_free_r+0x7a>
 80036c4:	230c      	movs	r3, #12
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	e7d4      	b.n	8003674 <_free_r+0x24>
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	1821      	adds	r1, r4, r0
 80036ce:	428b      	cmp	r3, r1
 80036d0:	bf01      	itttt	eq
 80036d2:	6819      	ldreq	r1, [r3, #0]
 80036d4:	685b      	ldreq	r3, [r3, #4]
 80036d6:	1809      	addeq	r1, r1, r0
 80036d8:	6021      	streq	r1, [r4, #0]
 80036da:	6063      	str	r3, [r4, #4]
 80036dc:	6054      	str	r4, [r2, #4]
 80036de:	e7c9      	b.n	8003674 <_free_r+0x24>
 80036e0:	bd38      	pop	{r3, r4, r5, pc}
 80036e2:	bf00      	nop
 80036e4:	200000ec 	.word	0x200000ec

080036e8 <_malloc_r>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	1ccd      	adds	r5, r1, #3
 80036ec:	f025 0503 	bic.w	r5, r5, #3
 80036f0:	3508      	adds	r5, #8
 80036f2:	2d0c      	cmp	r5, #12
 80036f4:	bf38      	it	cc
 80036f6:	250c      	movcc	r5, #12
 80036f8:	2d00      	cmp	r5, #0
 80036fa:	4606      	mov	r6, r0
 80036fc:	db01      	blt.n	8003702 <_malloc_r+0x1a>
 80036fe:	42a9      	cmp	r1, r5
 8003700:	d903      	bls.n	800370a <_malloc_r+0x22>
 8003702:	230c      	movs	r3, #12
 8003704:	6033      	str	r3, [r6, #0]
 8003706:	2000      	movs	r0, #0
 8003708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370a:	f000 f857 	bl	80037bc <__malloc_lock>
 800370e:	4921      	ldr	r1, [pc, #132]	; (8003794 <_malloc_r+0xac>)
 8003710:	680a      	ldr	r2, [r1, #0]
 8003712:	4614      	mov	r4, r2
 8003714:	b99c      	cbnz	r4, 800373e <_malloc_r+0x56>
 8003716:	4f20      	ldr	r7, [pc, #128]	; (8003798 <_malloc_r+0xb0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b923      	cbnz	r3, 8003726 <_malloc_r+0x3e>
 800371c:	4621      	mov	r1, r4
 800371e:	4630      	mov	r0, r6
 8003720:	f000 f83c 	bl	800379c <_sbrk_r>
 8003724:	6038      	str	r0, [r7, #0]
 8003726:	4629      	mov	r1, r5
 8003728:	4630      	mov	r0, r6
 800372a:	f000 f837 	bl	800379c <_sbrk_r>
 800372e:	1c43      	adds	r3, r0, #1
 8003730:	d123      	bne.n	800377a <_malloc_r+0x92>
 8003732:	230c      	movs	r3, #12
 8003734:	4630      	mov	r0, r6
 8003736:	6033      	str	r3, [r6, #0]
 8003738:	f000 f846 	bl	80037c8 <__malloc_unlock>
 800373c:	e7e3      	b.n	8003706 <_malloc_r+0x1e>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	1b5b      	subs	r3, r3, r5
 8003742:	d417      	bmi.n	8003774 <_malloc_r+0x8c>
 8003744:	2b0b      	cmp	r3, #11
 8003746:	d903      	bls.n	8003750 <_malloc_r+0x68>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	441c      	add	r4, r3
 800374c:	6025      	str	r5, [r4, #0]
 800374e:	e004      	b.n	800375a <_malloc_r+0x72>
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	42a2      	cmp	r2, r4
 8003754:	bf0c      	ite	eq
 8003756:	600b      	streq	r3, [r1, #0]
 8003758:	6053      	strne	r3, [r2, #4]
 800375a:	4630      	mov	r0, r6
 800375c:	f000 f834 	bl	80037c8 <__malloc_unlock>
 8003760:	f104 000b 	add.w	r0, r4, #11
 8003764:	1d23      	adds	r3, r4, #4
 8003766:	f020 0007 	bic.w	r0, r0, #7
 800376a:	1ac2      	subs	r2, r0, r3
 800376c:	d0cc      	beq.n	8003708 <_malloc_r+0x20>
 800376e:	1a1b      	subs	r3, r3, r0
 8003770:	50a3      	str	r3, [r4, r2]
 8003772:	e7c9      	b.n	8003708 <_malloc_r+0x20>
 8003774:	4622      	mov	r2, r4
 8003776:	6864      	ldr	r4, [r4, #4]
 8003778:	e7cc      	b.n	8003714 <_malloc_r+0x2c>
 800377a:	1cc4      	adds	r4, r0, #3
 800377c:	f024 0403 	bic.w	r4, r4, #3
 8003780:	42a0      	cmp	r0, r4
 8003782:	d0e3      	beq.n	800374c <_malloc_r+0x64>
 8003784:	1a21      	subs	r1, r4, r0
 8003786:	4630      	mov	r0, r6
 8003788:	f000 f808 	bl	800379c <_sbrk_r>
 800378c:	3001      	adds	r0, #1
 800378e:	d1dd      	bne.n	800374c <_malloc_r+0x64>
 8003790:	e7cf      	b.n	8003732 <_malloc_r+0x4a>
 8003792:	bf00      	nop
 8003794:	200000ec 	.word	0x200000ec
 8003798:	200000f0 	.word	0x200000f0

0800379c <_sbrk_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	2300      	movs	r3, #0
 80037a0:	4d05      	ldr	r5, [pc, #20]	; (80037b8 <_sbrk_r+0x1c>)
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	f7fe f9f2 	bl	8001b90 <_sbrk>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_sbrk_r+0x1a>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_sbrk_r+0x1a>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20000160 	.word	0x20000160

080037bc <__malloc_lock>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__malloc_lock+0x8>)
 80037be:	f000 b809 	b.w	80037d4 <__retarget_lock_acquire_recursive>
 80037c2:	bf00      	nop
 80037c4:	20000168 	.word	0x20000168

080037c8 <__malloc_unlock>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__malloc_unlock+0x8>)
 80037ca:	f000 b804 	b.w	80037d6 <__retarget_lock_release_recursive>
 80037ce:	bf00      	nop
 80037d0:	20000168 	.word	0x20000168

080037d4 <__retarget_lock_acquire_recursive>:
 80037d4:	4770      	bx	lr

080037d6 <__retarget_lock_release_recursive>:
 80037d6:	4770      	bx	lr

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
